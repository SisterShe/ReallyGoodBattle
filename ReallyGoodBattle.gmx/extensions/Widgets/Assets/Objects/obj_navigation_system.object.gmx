<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Data Variables
loops = noone;
input_up_1 = noone;
input_up_2 = noone;
input_down_1 = noone;
input_down_2 = noone;
left_stick = noone;
right_stick = noone;

//Instance Variables
widgets = ds_list_create();
selected = noone;
position = 0;
stick_delay = room_seconds(0.25);
stick_delay_passed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleans-Up Leaks
ds_list_destroy(widgets);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stick Input Delay Alarm
stick_delay_passed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Navigation

//Check for input.
if (input_check_pressed(0, input_up_1, input_up_2))
{
    event_user(1);
}

//Check for input.
if (input_check_pressed(0, input_down_1, input_down_2))
{
    event_user(2);
}

//Check for stick input.
if (left_stick)
{
    //Check if stick delay have passed.
    if (stick_delay_passed)
    {
        //Starts stick delay timer.
        alarm[0] = stick_delay;
        stick_delay_passed = false;
        
        //Detects up and down input.
        gamepad_set_axis_deadzone(0, 0.5);
        var ukey = (gamepad_axis_value(0, gp_axislv) &lt; 0);
        var dkey = (gamepad_axis_value(0, gp_axislv) &gt; 0);
        
        //Check if upwards.
        if (ukey)
        {
            event_user(1);
        }
        
        //Check if downwards.
        else if (dkey)
        {
            event_user(2);
        }
        else
        {
            stick_delay_passed = true;
        }
    }
}


//Check for stick input.
if (right_stick)
{
    //Check if stick delay have passed.
    if (stick_delay_passed)
    {
        //Starts stick delay timer.
        alarm[0] = stick_delay;
        stick_delay_passed = false;
        
        //Detects up and down input.
        gamepad_set_axis_deadzone(0, 0.5);
        var ukey = (gamepad_axis_value(0, gp_axisrv) &lt; 0);
        var dkey = (gamepad_axis_value(0, gp_axisrv) &gt; 0);
        
        //Check if upwards.
        if (ukey)
        {
            event_user(1);
        }
        
        //Check if downwards.
        else if (dkey)
        {
            event_user(2);
        }
        else
        {
            stick_delay_passed = true;
        }
    }
}

//Check for stick movement.

//TODO: Add sticks later, implement delay to them also.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moves position downwards.

//Changes selected widget.
position -= 1;
if (position &lt; 0)
{
    if (loops)
    {
        position = ds_list_size(widgets) -1;;
    }
    else
    {
        position = 0;
    }
}
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moves position upwards.

//Changes selected widget.
position += 1;
if (position &gt; ds_list_size(widgets) - 1) //Maybe -1
{
    if (loops)
    {
        position = 0;
    }
    else
    {
        position = ds_list_size(widgets) -1;
    }
}
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Updates widget selection.

//Check if widget selected.
if (selected != noone)
{
    //Deselects currently selected widget.
    with (selected)
    {
        selected = false;
    }
}

//Selects widget for position.
var widget = ds_list_find_value(widgets, position);
selected = widget;
with (widget)
{
    selected = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calls Instance Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
