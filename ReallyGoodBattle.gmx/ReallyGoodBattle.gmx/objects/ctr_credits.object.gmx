<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Plays Music.
//global.music = audio_play_sound_volume(msi_cleanair_ending, 10, true, 1);

//Instance Variables
distance = room_height + 50;
credit_speed = 1;
credit_height = 250;
skip_draw = false;
skipping = false;
alpha = 0;
skip_draw_speed = 1 / room_seconds(1.5);
skip_draw_duration = room_seconds(10);
width_max = 500;

//Credit settings.
font_small = fnt_joystix_8;
font_medium = fnt_joystix_16;
font_big = fnt_joystix_32;

//Setup the credits.
credits = ds_list_create();
scr_add_credits("Really Good Battle", font_big, c_red);
scr_add_credits(" ", font_medium, c_white);
scr_add_credits(" ", font_medium, c_white);
scr_add_credits("Programming", font_medium, c_green);
scr_add_credits(" ", font_small, c_white);
scr_add_credits("Kate Sander", font_small, c_white);
scr_add_credits(" ", font_small, c_white);
scr_add_credits(" ", font_small, c_white);
scr_add_credits(" ", font_small, c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean-Up Leaks
ds_list_destroy(credits);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets skipping.
skip_draw = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scrolls the credits.

//Updates position of credits.
distance -= credit_speed;
if (distance &lt; -credit_height and !skipping)
{
    //Skips the credits.
    room_cfade(rm_mainmenu, room_seconds(5), c_black);
    audio_sound_gain(global.music, 0, room_seconds(5));
    skipping = true;
}

//Skip draw alpha update.
if (skip_draw)
{
    alpha = clamp(alpha + skip_draw_speed, 0, 1);
}
else
{
    alpha = clamp(alpha - skip_draw_speed, 0, 1);
}

//Detects input.
if (input_check_pressed(0, vk_escape, gp_face1, gp_face2, gp_face3, gp_face4, gp_start, gp_select))
{
    //Check if skip draw already.
    if (skip_draw and !skipping)
    {
        //Skips the credits.
        skipping = true;
        skip_draw = false;
        room_cfade(rm_mainmenu, room_seconds(5), c_black);
        audio_sound_gain(global.music, 0, room_seconds(4));
    }
}

//Detects input.
if (keyboard_check_pressed(vk_anykey) or input_check_pressed(0, gp_face1, gp_face2, gp_face3, gp_face4, gp_start, gp_select))
{
    //Checks if not already skipping.
    if (!skipping)
    {
        //Displays skip text.
        skip_draw = true;
        alarm[0] = skip_draw_duration;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Suicides to run destory code.
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws the credits.

//Initial setup.
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
var xx = room_width/2;
var height = 0;

//Draws credits.
for (var i = 0; i &lt; ds_list_size(credits); i++)
{
    //Setup variables.
    var data = ds_list_find_value(credits, i);
    var text = data.text;
    var font = data.font;    
    var color = data.color;
    var sep = font_get_size(font) * 2;
    var yy = sep + distance + height;
    
    //Setup drawing.
    draw_set_font(font)
    draw_set_color(color);
    
    //Draws the credit.
    draw_text_ext(xx, yy, text, sep, width_max);   
    var draw_height = string_height_ext(text + "1", sep, width_max);
    height += draw_height;
}

//Draws press escape to skip in corner.
draw_set_alpha(alpha);
draw_set_font(fnt_joystix_8);
draw_set_halign(fa_right);
draw_text(room_width - 8, room_height - 8, "Press Anykey to Skip");
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
