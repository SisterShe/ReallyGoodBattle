<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Instance Variables
paused = false;
screenshot = noone;
save_room = noone;
input_alarm = false;
disabled = false;

//Save Alarms
save_alarm_1 = -1;
save_alarm_2 = -1;
save_alarm_3 = -1;
save_alarm_4 = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Exit Persistence
room_persistent = false;
room_goto(rm_pause);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restore room persitence.
room_persistent = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input Alarm
input_alarm = false;
GameMaster_obj.pause_room = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detects Pause Input

//Check if disabled.
if (disabled) exit;

//Setup key variables.
var key_jump1 = ds_list_find_value(global.keybindings, 0).jump_key1_gamepad;
var key_jump2 = ds_list_find_value(global.keybindings, 0).jump_key1_keyboard;
var key_attack1 = ds_list_find_value(global.keybindings, 0).attack_key1_gamepad;
var key_attack2 = ds_list_find_value(global.keybindings, 0).attack_key1_keyboard;

//Check for pause input.
if (input_check_pressed(0, gp_start, vk_escape) and !paused)
{
    //Pause
    event_user(0);
    audio_play_sound_volume(sfx_select_red, 10, false, global.sfxvolume);
}

//Check for resume input.
else if (input_check_pressed(0, key_jump1, key_jump2, gp_start, vk_enter) and paused)
{
    //Resumes
    event_user(1);
    audio_play_sound_volume(sfx_exit, 10, false, global.sfxvolume);
}

//Check for exit input.
else if (input_check_pressed(0, key_attack1, key_attack2, gp_select, vk_escape) and paused)
{
    //Restores room persistence to save room.
    room_goto(save_room);
    alarm[2] = 1;
    
    //Goes to main menu.
    room_cfade(rm_mainmenu, room_seconds(1), c_white);
    audio_play_sound_volume(sfx_exit, 10, false, global.sfxvolume);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpauses Game

//Destroys screenshot.
sprite_delete(screenshot);
screenshot = noone;

//Switches room back.
room_goto(save_room);
alarm[1] = 1; //Persistence alarm.

//Resumes Music
audio_resume_sound(global.music);

//Unpause respawn alarms.
with (GameMaster_obj)
{
    alarm[0] = other.save_alarm_1;
    alarm[1] = other.save_alarm_2;
    alarm[2] = other.save_alarm_3;
    alarm[3] = other.save_alarm_4;
}

//Updates variables.
paused = false;

//Short input alarm.
input_alarm = true;
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pauses Game

//Pauses respawn alarms.
with (GameMaster_obj)
{
    pause_room = true; //Prevents initial spawn alarms.
    other.save_alarm_1 = alarm[0];
    other.save_alarm_2 = alarm[1];
    other.save_alarm_3 = alarm[2];
    other.save_alarm_4 = alarm[3];
    alarm[0] = -1;
    alarm[1] = -1;
    alarm[2] = -1;
    alarm[3] = -1;
}

//Pauses Music
audio_pause_sound(global.music);

//Takes screenshot.
var width = surface_get_width(application_surface);
var height = surface_get_height(application_surface);
screenshot = sprite_create_from_surface(application_surface, 0, 0, width, height, false, false, 0, 0);

//Switches room.
save_room = room;
room_persistent = true;
room_goto(rm_pause);

//Updates paused.
paused = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Suicide.

//Detects if room is main menu.
if (room = rm_mainmenu)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws Pause Screen

//Check if paused.
if (paused)
{
    //Draws stored screenshot.
    draw_sprite(screenshot, 0, 0, 0);
    
    //Draws black box across screen.
    draw_set_color(c_black);
    draw_set_alpha(0.75);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_alpha(1);
    
    //Draws paused text.
    draw_setup(c_white, fnt_joystix_16, fa_center, fa_top, false);
    draw_text(room_width/2, room_height/2 - 30, "Paused");
    
    //Draws Info Text
    draw_set_font(fnt_joystix_8);
    if (gamepad_is_connected(0))
    {
        var key1 = string_keycheck(ds_list_find_value(global.keybindings, 0).attack_key1_gamepad);
        var key2 = string_keycheck(ds_list_find_value(global.keybindings, 0).jump_key1_gamepad);
        draw_text(room_width/2, room_height/2 + 20, "Press " + key2 + " to resume.#Press " + key1 + " to exit.");
    }
    else
    {
        var key1 = string_keycheck(ds_list_find_value(global.keybindings, 0).jump_key1_keyboard);
        var key2 = string_keycheck(ds_list_find_value(global.keybindings, 0).attack_key1_keyboard);
        draw_text(room_width/2, room_height/2 + 20, "Press " + key1 + " to resume.#Press " + key2 + " to exit.");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
