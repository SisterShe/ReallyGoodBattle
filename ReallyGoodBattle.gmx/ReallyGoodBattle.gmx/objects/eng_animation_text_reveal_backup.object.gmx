<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Data Variables
gui = noone;
duration = noone;
tspd = noone;
cspd = noone;
aspd = noone;
color1 = noone;
color2 = noone;
font = noone;
halign = noone;
valign = noone;
xx = noone;
yy = noone;
text = noone;
sep = noone;
width = noone;

//Instance Variables
chars = ds_list_create();
lines[0] = noone;
hoffset = noone;
voffset = noone;
fadeout = false;
paused = false;
total = 0;
count = 0;
step = 0;
line = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleans-Up Leaks
for (var i = 0; i &lt; ds_list_size(chars); i++)
{
    var data = ds_list_find_value(chars, i);
    ds_list_destroy(data);
}
ds_list_destroy(chars);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Update

//Checks if paused.
if (paused) exit;

//Typewriter Effect
if (count &lt; string_length(text))
{
    //Increments count.
    count += tspd;
    
    //Checks for new character.
    if (count &gt; total)
    {
        //Calculates delta.
        var delta = ceil(count - total);
        
        //Enters a loop for each new char.
        for (var i = 0; i &lt; delta; i++)
        {
            //Creates a new character.
            var char = string_char_at(text, total+i+1);
            var data = ds_list_create();
            ds_list_add(data, 0);
            ds_list_add(data, 0);
            ds_list_add(data, char);
            ds_list_add(chars, data);
        }
        
        //Updates total.
        total += delta;
    }
}

//Color Effect
for (var i = 0; i &lt; ds_list_size(chars); i++)
{
    //Updates color value for char.
    var data = ds_list_find_value(chars, i);
    var color = ds_list_find_value(data, 0);
    color = clamp(color + cspd, 0, 1);
    ds_list_replace(data, 0, color);
}

//Alpha Effect
for (var i = 0; i &lt; ds_list_size(chars); i++)
{
    //Checks for fadeout.
    if (!fadeout)
    {
        //Updates alpha value for char.
        var data = ds_list_find_value(chars, i);
        var alpha = ds_list_find_value(data, 1);
        alpha = clamp(alpha + aspd, 0, 1);
        ds_list_replace(data, 1, alpha);
    }
}

//Checks if infinite duration.
if (duration = -1) exit;

//Increments step for alarm.
step++;

//Check for fadeout start.
if (!fadeout and step &gt; fadeout_start)
{
    fadeout = true;
}

//Checks if fadeout.
if (fadeout)
{
    //Fadeout Alpha Effect
    for (var i = 0; i &lt; ds_list_size(chars); i++)
    {
        //Updates alpha value for char.
        var data = ds_list_find_value(chars, i);
        var alpha = ds_list_find_value(data, 1);
        alpha = clamp(alpha - aspd, 0, 1);
        ds_list_replace(data, 1, alpha);
    }
    
    //Check for fadeout complete.
    if (step = duration)
    {
        //Suicide
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show all text.

//Skips to the end and shows all text, but does not start the fadeout.
count = string_length(text);
ds_list_clear(chars);

//Enters a loop for each new char.
for (var i = 0; i &lt; string_length(text); i++)
{
    //Creates a new character.
    var char = string_char_at(text, i+1);
    var data = ds_list_create();
    ds_list_add(data, 0);
    ds_list_add(data, 0);
    ds_list_add(data, char);
    ds_list_add(chars, data);
}

//Color Effect
for (var i = 0; i &lt; ds_list_size(chars); i++)
{
    //Updates color value for char.
    var data = ds_list_find_value(chars, i);
    var color = ds_list_find_value(data, 0);
    color = 1;
    ds_list_replace(data, 0, color);
}

//Alpha Effect
for (var i = 0; i &lt; ds_list_size(chars); i++)
{
    //Checks for fadeout.
    if (!fadeout)
    {
        //Updates alpha value for char.
        var data = ds_list_find_value(chars, i);
        var alpha = ds_list_find_value(data, 1);
        alpha = 1;
        ds_list_replace(data, 1, alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Updates offset for line.

//Setups drawing font.
draw_set_font(font);

//Determines the line.
var line_text = lines[line];

//Determines horizontal alignment offset.
switch (halign)
{
    case fa_left: 
        hoffset = 0; 
        break;
        
    case fa_center: 
        hoffset = string_width_ext(line_text, sep, width) / 2;
        break;
        
    case fa_right:
        hoffset = string_width_ext(line_text, sep, width);
        break;
}

//Determines vertical alignment offset.
switch (valign)
{
    case fa_top: 
        voffset = 0; 
        break;
        
    case fa_middle: 
        voffset = string_height_ext(line_text, sep, width) / 2;
        break;
        
    case fa_bottom:
        voffset = string_height_ext(line_text, sep, width);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starts Fadeout

//Checks if infinite duration.
if (duration = -1) exit;

//Updates variables.
fadeout = true;
step = fadeout_start;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed Creation Code

//Complex Data Variables

//Calculates fadeout start.
if (duration != -1)
{
    fadeout_start = duration - (1 / aspd); 
}

//Setup line array.
draw_set_font(font);
var height = string_height("Height String") + 1;
string_array_page_parser(text, lines, width, height, font, halign, valign, sep);

//Creates all characters.
for (var i = 1; i &lt; string_length(text); i++)
{
    var char = string_char_at(text, i);
    var data = ds_list_create();
    ds_list_add(data, 0);
    ds_list_add(data, 0);
    ds_list_add(data, char);
    ds_list_add(chars, data);
}








/*

//Parses text into an array for each line.
draw_set_font(font);
var page_height = string_height("Height String");
var page_width = width;
var current = 1;
var total = 1;
var length = string_length(text);
var page_count = 0;
var txt = text;
var array = lines;

//Enters a loop for each letter.
while (total &lt; length)
{    
    //Manipulates the string.
    var copy = string_copy(txt, 1, current);
    
    //Checks for word completion.
    if (string_char_at(copy, current) = " " or string_char_at(copy, current) = "#")
    {
        //Stores the page.
        array[@page_count] = copy;
        
        //Calcuates the height of current copy.
        var height = string_height_ext(copy, sep, page_width);
        
        //Checks to see if new page.
        if (height &gt;= page_height or string_char_at(copy, current) = "#")
        {            
            //Clears the main text string, to calculate for new page.
            txt = string_delete(txt, 1, current);
            current = 0;
            
            //Increments Page Count.
            page_count += 1;
        }
    }
    
    //Increments Strings.
    current += 1;
    total += 1;
    
    //Checks for last word.
    if total &lt; length
    {
        //Stores the page.
        current += 1;
        var copy = string_copy(txt, 1, current);
        array[@page_count] = copy;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resumes Animation
paused = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pauses Animation
paused = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calls Destroy Event
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Drawing

//Checks if correct draw event.
if (!gui) exit;

//Setups drawing.
draw_set_font(font);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

//Local Variables
var text_width = 0;
var x1 = xx - hoffset;
var y1 = yy - voffset;

//Enters a loop for each char.
for (var i = 0; i &lt; ds_list_size(chars); i++)
{
    //Retrives the char data.
    var data = ds_list_find_value(chars, i);
    var color = ds_list_find_value(data, 0);
    var alpha = ds_list_find_value(data, 1);
    var char = ds_list_find_value(data, 2);
    
    //Check if line break.
    if (char = '#')
    {
        //New line position update.
        x1 = xx - hoffset;
        y1 += sep;
    }
    else
    {
        //Setups drawing.
        draw_set_color(merge_color(color1, color2, color));
        draw_set_alpha(alpha);
        
        //Draws character.
        draw_text(x1, y1, char);
        
        //Same line position update.
        x1 += string_width(char);
        text_width += string_width(char);
        
        //Checks if new line.
        if (text_width &gt;= width)
        {
            //New line position update.
            text_width = 0;
            x1 = xx - hoffset;
            y1 += sep;
        }
    }
}

//Resets drawing alpha.
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Drawing

//Checks if correct draw event.
if (gui) exit;

//Setups drawing.
draw_set_font(font);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

//Determines offset for line.
line = 0;
event_user(4);

//Local Variables
var text_width = 0;
var x1 = xx - hoffset;
var y1 = yy - voffset;
var previous_char = noone;

//Enters a loop for each char.
for (var i = 0; i &lt; ds_list_size(chars); i++)
{
    //Retrives the char data.
    var data = ds_list_find_value(chars, i);
    var color = ds_list_find_value(data, 0);
    var alpha = ds_list_find_value(data, 1);
    var char = ds_list_find_value(data, 2);
    
    //Check if line break.
    if (char == "#" and previous_char != "\")
    {
        //New line position update.
        text_width = 0;
        x1 = xx - hoffset;
        y1 += sep;
        line += 1;
        event_user(4);
    }
    else
    {
        //Setups drawing.
        draw_set_color(merge_color(color1, color2, color));
        draw_set_alpha(alpha);
        
        //Draws character.
        draw_text(x1, y1, char);
        
        //Same line position update.
        x1 += string_width(char);
        text_width += string_width(char);
        
        //Checks if new line.
        if (text_width &gt;= width)
        {
            //New line position update.
            text_width = 0;
            x1 = xx - hoffset;
            y1 += sep;
            line += 1;
            event_user(4);
        }
    }
    
    //Updates variables.
    previous_char = char;
}

//Resets drawing alpha.
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
