<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Lazer_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code
image_alpha = .8

//Instance Variables.
damage = 1; 
creator = noone; 
alarm[0] = 10; 
alarm[1] = 1;
Growth = 2; 
Red = 0; 
Green = 0; 
Blue = 0; 
inactive = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Plays soundfile.
if (!instance_exists(creator)) exit;
if (creator.punch_noise = false)
{
    var sfx = audio_play_sound_volume(sfx_lazer_fire, 10, false, global.sfxvolume);
    //audio_sound_pitch(sfx, random_range(1.5,2.5));
    creator.alarm[4] = 30;
    creator.punch_noise = true;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = image_alpha / 1.01; 
image_yscale = image_yscale / 1.01; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale =  (sign(image_xscale)) * 16
image_alpha = image_alpha / 1.05; 
//image_yscale = image_yscale / 1.05; 
if (image_alpha &lt;= .25) {
    instance_destroy();
} 
//colro 

if (instance_exists(creator)) {
if (instance_exists(Player1_obj)) {
 if (creator.id == Player1_obj.id) {
Red = GameMaster_obj.Player1Red;
Green = GameMaster_obj.Player1Green;
Blue = GameMaster_obj.Player1Blue; 
}
}
    if (instance_exists(Player2_obj)) {
  if (creator.id == Player2_obj.id) {
Red = GameMaster_obj.Player2Red;
Green = GameMaster_obj.Player2Green;
Blue = GameMaster_obj.Player2Blue; 
}
}
    if (instance_exists(Player3_obj)) {
 if (creator.id == Player3_obj.id) {
Red = GameMaster_obj.Player3Red;
Green = GameMaster_obj.Player3Green;
Blue = GameMaster_obj.Player3Blue; 
}
}
    if (instance_exists(Player4_obj)) {
 if (creator.id == Player4_obj.id) {
Red = GameMaster_obj.Player4Red;
Green = GameMaster_obj.Player4Green;
Blue = GameMaster_obj.Player4Blue; 
}
}
}
image_blend = make_color_rgb(Red,Green,Blue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Player_Parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles collision with player.

//Check if inactive.
if (inactive) exit;

//Check if owner can attack.
if (!creator.can_attack) exit;

//Updates the tiles color.
if (instance_exists(creator)) 
{
    //Player 1
    if (instance_exists(Player1_obj)) 
    {
        if (creator.id == Player1_obj.id) 
        {
            TileParent_obj.Red = GameMaster_obj.Player1Red;
            TileParent_obj.Green = GameMaster_obj.Player1Green;
            TileParent_obj.Blue = GameMaster_obj.Player1Blue; 
        }
    }
    
    //Player 2
    if (instance_exists(Player2_obj)) 
    {
        if (creator.id == Player2_obj.id) 
        {
            TileParent_obj.Red = GameMaster_obj.Player2Red;
            TileParent_obj.Green = GameMaster_obj.Player2Green;
            TileParent_obj.Blue = GameMaster_obj.Player2Blue; 
        }
    }
    
    //Player 3
    if (instance_exists(Player3_obj)) 
    {
        if (creator.id == Player3_obj.id) 
        {
            TileParent_obj.Red = GameMaster_obj.Player3Red;
            TileParent_obj.Green = GameMaster_obj.Player3Green;
            TileParent_obj.Blue = GameMaster_obj.Player3Blue; 
        }
    }
    
    //Player 4
    if (instance_exists(Player4_obj)) 
    {
        if (creator.id == Player4_obj.id) 
        {
            TileParent_obj.Red = GameMaster_obj.Player4Red;
            TileParent_obj.Green = GameMaster_obj.Player4Green;
            TileParent_obj.Blue = GameMaster_obj.Player4Blue; 
        }
    }
}

//Confirms collision.
if (instance_exists(creator)) 
{ 
    //Detects collision with enemy.
    if (other.can_behit = true)
    {
        //Check if not the creator.
        if (other != creator) 
        {
            //Kills Player.
            var player_hit_instance = other;
            other.hspeed = 0; 
            other.vspeed = 0; 
            //other.x += random_range(3,-3); 
            //other.y += random_range(3,-3); 
            other.alarm[3] = 8; //Death Timer
            other.can_attack = false; //Disable this to have players kill each-other.
            other.can_behit = false;
            other.laserdeath = true;
            audio_sound_gain(creator.laser_sound_sfx, 0, 0);
            
            camera_shake(2, room_seconds(0.2), false);  
            
            //Check if point capture gamemode.
            if (global.gamemode = "Captures to Win")
            {
                exit;
            }
            
            //Slows down room.
            room_speed = 16; 
            
            //Dunno what these are.
            creator.Combo += 1; 
            creator.SpawnLine = true; 
            
            //Check for gamemode.
            if (global.gamemode = "Player Lives")
            {
                //Detects creator player.
                var i = 0;
                switch (other.object_index)
                {
                    case Player1_obj:
                    i = 0;
                    break;
                    
                    case Player2_obj:
                    i = 1;
                    break;
                    
                    case Player3_obj:
                    i = 2;
                    break;
                    
                    case Player4_obj:
                    i = 3;
                    break;
                }
                
                //Detects creator player.
                var p = 0;
                switch (creator.object_index)
                {
                    case Player1_obj:
                    p = 0;
                    break;
                    
                    case Player2_obj:
                    p = 1;
                    break;
                    
                    case Player3_obj:
                    p = 2;
                    break;
                    
                    case Player4_obj:
                    p = 3;
                    break;
                }
            }
            else
            {
                //Detects creator player.
                var i = 0;
                switch (creator.object_index)
                {
                    case Player1_obj:
                    i = 0;
                    break;
                    
                    case Player2_obj:
                    i = 1;
                    break;
                    
                    case Player3_obj:
                    i = 2;
                    break;
                    
                    case Player4_obj:
                    i = 3;
                    break;
                }
            }
            
            //Runs code from controller.
            with (obj_score_controller)
            {
                //Check for gamemode.
                if (global.gamemode = "Player Lives")
                {
                    //Updates player score.
                    var player_score = ds_list_find_value(scores, i);
                    player_score -= 1;
                    ds_list_replace(scores, i, player_score);     
                    event_user(0); //Updates highest score player.
                    
                    //Check for victory, by determining if only remaining player.
                    var victory = true;
                    for (var j = 0; j &lt; 4; j++)
                    {
                        //Switch to avoid stupid old hardcoded systems.
                        switch (j)
                        {
                            //Check if player 1 is playing.
                            case 0:
                            if (GameMaster_obj.Player1Active or global.player1_ai)
                            {
                                //Check if player 1 have remaining lives.
                                if (ds_list_find_value(scores, j) &gt; 0)
                                {
                                    //Check that player 1 is not creator.
                                    if (other.creator.object_index != Player1_obj)
                                    {
                                        victory = false;
                                    }
                                }
                            }
                            break;
                              
                            //Check if player 2 is playing.
                            case 1:
                            if (GameMaster_obj.Player2Active or global.player2_ai)
                            {
                                //Check if player 2 have remaining lives.
                                if (ds_list_find_value(scores, j) &gt; 0)
                                {
                                    //Check that player 2 is not creator.
                                    if (other.creator.object_index != Player2_obj)
                                    {
                                        victory = false;
                                    }
                                }
                            }
                            break;
                            
                            //Check if player 3 is playing.
                            case 2:
                            if (GameMaster_obj.Player3Active or global.player3_ai)
                            {
                                //Check if player 3 have remaining lives.
                                if (ds_list_find_value(scores, j) &gt; 0)
                                {
                                    //Check that player 3 is not creator.
                                    if (other.creator.object_index != Player3_obj)
                                    {
                                        victory = false;
                                    }
                                }
                            }
                            break;
                            
                            //Check if player 4 is playing.
                            case 3:
                            if (GameMaster_obj.Player4Active or global.player4_ai)
                            {
                                //Check if player 4 have remaining lives.
                                if (ds_list_find_value(scores, j) &gt; 0)
                                {
                                    //Check that player 4 is not creator.
                                    if (other.creator.object_index != Player4_obj)
                                    {
                                        victory = false;
                                    }
                                }
                            }
                            break;
                        }
                    }
                    
                    //Check if player have won.
                    if (victory)
                    {
                        //Updates player game score.
                        var game_score = ds_list_find_value(games, p);
                        game_score += 1;
                        ds_list_replace(games, p, game_score);   
                        event_user(1); //Checks if player is winner.
                        
                        //Start slowmotion tween.
                        instance_create(x, y, obj_tween_slowmotion);
                        var blackout = instance_create(other.x, other.y, BlackOut_obj); 
                        var blackout1 = instance_create(player_hit_instance.x, player_hit_instance.y, obj_blackbox_radius);
                        var blackout2 = instance_create(other.creator.x, other.creator.y, obj_blackbox_radius);
                        blackout1.target = player_hit_instance;
                        blackout2.target = other.creator;
                        blackout.target1 = blackout1;
                        blackout.target2 = other;
                        blackout.target3 = blackout2;
                        event_user_ext(blackout, 1);
                        camera_shake(5, room_seconds(1), false);  
                        camera_tween(player_hit_instance.x, player_hit_instance.y, 512/3, 288/3, 512, 288, 0, true,
                        true, tween_quintic_in, room_seconds(0.3));
                        
                        //Stops music slowly.
                        audio_sound_gain(global.music, 0, room_seconds(3));
                        
                        //Scorescreen alarm.
                        round_over = true;
                        alarm[0] = 30;
                        
                        //Disables pause.
                        with (obj_pause_controller)
                        {
                            disabled = true;
                        }
                    }
                    else
                    {
                        //Plays popup animation for lives.
                        animation_text_popup(-100, 1, 0.02, fnt_joystix_16, fa_center,
                        fa_top, player_hit_instance.x, player_hit_instance.y, string(player_score), 100, 100,
                        room_seconds(2), 50, 90, c_white, c_white);
                    }
                }
                else
                {
                    //Updates player score.
                    var player_score = ds_list_find_value(scores, i);
                    player_score += 1;
                    ds_list_replace(scores, i, player_score);     
                    event_user(0); //Updates highest score player.
                    
                    //Check for victory.
                    if (player_score &gt;= global.score_max)
                    {
                        //Updates player game score.
                        var game_score = ds_list_find_value(games, i);
                        game_score += 1;
                        ds_list_replace(games, i, game_score);   
                        event_user(1); //Checks if player is winner.
                        
                        //Start slowmotion tween.
                        instance_create(x, y, obj_tween_slowmotion);
                        var blackout = instance_create(other.x, other.y, BlackOut_obj); 
                        var blackout1 = instance_create(player_hit_instance.x, player_hit_instance.y, obj_blackbox_radius);
                        var blackout2 = instance_create(other.creator.x, other.creator.y, obj_blackbox_radius);
                        blackout1.target = player_hit_instance;
                        blackout2.target = other.creator;
                        blackout.target1 = blackout1;
                        blackout.target2 = other;
                        blackout.target3 = blackout2;
                        event_user_ext(blackout, 1);
                        camera_shake(5, room_seconds(1), false);  
                        camera_tween(player_hit_instance.x, player_hit_instance.y, 512/3, 288/3, 512, 288, 0, true,
                        true, tween_quintic_in, room_seconds(0.3));
                        
                        //Stops music slowly.
                        audio_sound_gain(global.music, 0, room_seconds(3));
                        
                        //Scorescreen alarm.
                        round_over = true;
                        alarm[0] = 30;
                        
                        //Disables pause.
                        with (obj_pause_controller)
                        {
                            disabled = true;
                        }
                    }
                    else
                    {
                        //Plays popup animation for score.
                        animation_text_popup(-100, 1, 0.02, fnt_joystix_16, fa_center,
                        fa_top, other.creator.x, other.creator.y, string(player_score), 100, 100,
                        room_seconds(2), 50, 90, c_white, c_white);
                    }
                }
            }
        }
    }
}

/* Shakes the players if they are invunerable and hit, causing them to bne stuck
   Disabled for now.

//Updates position.
other.x += random_range(3,-3); 
other.y += random_range(3,-3); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
