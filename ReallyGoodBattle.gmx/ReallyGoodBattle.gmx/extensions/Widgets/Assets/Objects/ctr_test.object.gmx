<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates test Widgets.
view = widget_view(0, 0, room_width, room_height);

btn1 = widget_button(view, 250, 50, "Button1", fnt_8bit_12_b, c_black, 
c_red, room_seconds(0.5), spr_button, del_btn_test);

btn2 = widget_button(view, 250, 100, "Button2", fnt_8bit_12_b, c_black, 
c_orange, room_seconds(0.5), spr_button, del_btn_test);

btn3 = widget_button(view, 250, 150, "Button3", fnt_8bit_12_b, c_black, 
c_yellow, room_seconds(0.5), spr_button, del_btn_test);

slider = widget_slider(view, room_width / 2, room_height / 2 + 100,
spr_slider_bar, spr_slider_wheel, 50, 60, 50, del_slider_test, false);

nav_system = widget_navigation_setup(true, ord("W"), gp_padu, ord("S"), gp_padd, true, true);
widget_navigation_add(nav_system, slider);
widget_navigation_add(nav_system, btn3);
widget_navigation_add(nav_system, btn2);
widget_navigation_add(nav_system, btn1);
widget_navigation_select(nav_system, slider);






//Test Widgets

/*

checkbox = widget_checkbox(view, room_width / 2, room_height / 2 + 50, 
spr_checkbox, 0, 1, false, del_checkbox_test);

btn = widget_button(view, 100, 220, "Test Button", fnt_8bit_12_b, c_black, 
c_red, room_seconds(0.5), spr_button, del_btn_test);

label = widget_label(view, 416, 208, "Label", fnt_8bit_12_bi, fa_left,
fa_top, c_white, true, c_black, 2);

textfield = widget_textfield(view, room_width / 2, 25, "Text Field", fnt_8bit_12,
c_aqua, c_gray, spr_textfield, 15);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test Manipulation

if (input_check_pressed(0, ord("Q")))
{
    view.x = mouse_x;
    view.y = mouse_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
