<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// generate smooth noise
size = 256;
octaves = 5;
scale = 2;
persistence = 1.75;

surfaceNoise = huder_SmoothNoise(size, octaves, scale, persistence);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw smooth noise

if ( surface_exists(surfaceNoise))
    draw_surface(surfaceNoise, (view_wview-size)*0.5, (view_hview-size)*0.5);
    

  

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw buttons with text and make buttons clickable
draw_set_color(c_white);

var h = 10;    
draw_sprite(guiButton, 0, 10, h);
    draw_text(48, h+5, "octaves: " + string(octaves));
draw_sprite(guiButton, 1, 212, h);

h = 42;
draw_sprite(guiButton, 0, 10, h);
    draw_text(48, h+5, "scale: " + string(scale));
draw_sprite(guiButton, 1, 212, h);

h = 74;
draw_sprite(guiButton, 0, 10, h);
    draw_text(48, h+5, "persistence: " + string(persistence));
draw_sprite(guiButton, 1, 212, h);

draw_text(300, 10, "press enter to generate");
// set values
if ( mouse_check_button_pressed(mb_left) )
{
    if ( mouse_x &gt; 0 &amp;&amp; mouse_x &lt; 48 )
    {
        if ( mouse_y &gt; 10 &amp;&amp; mouse_y &lt; 30 ) octaves = max(1, octaves-1);
        if ( mouse_y &gt; 42 &amp;&amp; mouse_y &lt; 62 ) scale = max(1, scale-0.25);
        if ( mouse_y &gt; 74 &amp;&amp; mouse_y &lt; 94 ) persistence = max(0, persistence-0.05);
    }
    
    if ( mouse_x &gt; 212 &amp;&amp; mouse_x &lt; 233 )
    {
        if ( mouse_y &gt; 10 &amp;&amp; mouse_y &lt; 30 ) octaves = octaves+1;
        if ( mouse_y &gt; 42 &amp;&amp; mouse_y &lt; 62 ) scale = scale+0.25;
        if ( mouse_y &gt; 74 &amp;&amp; mouse_y &lt; 94 ) persistence = persistence+0.05;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// clear old and generate new smooth noise surface

surface_free(surfaceNoise);
surfaceNoise = huder_SmoothNoise(size, octaves, scale, persistence);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
