<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_widget_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Parent Inheritance
event_inherited();

//Built-In Variables
image_speed = 0;

//Data Variables
script = noone;
font = noone;
color1 = noone;
color2 = noone;
text = "";
steps = noone;
key = noone;

//Instance Variables
color = noone;
highlight = false;
value = 0;
input_detection = false;

//Tween Variables
directional_tween = noone;
directional_tween_duration = room_seconds(0.11); //Duration of tween.
directional_tween_distance = 1; //Distance in pixels.
directional_tween_y = noone;
directional_tween_lower = noone;
directional_tween_upper = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactiates directional tween.
directional_tween = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivates Input Detection
input_detection = false;
global.bindingkey = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Highlight and Press

//Check for input detection.
if (input_detection)
{   
    //Checks for any input.
    var device = 0;
    var input = input_check_any(device, true, true, true);
    if (input = false) exit;
    if (input_check_pressed(device, input))
    {
        //Updates button and executes script.
        key = input_check_any(device, true, true, true);
        script_execute(script);
        alarm[0] = 5;
        start_alarm = false;
        image_index = 0;
    }
}
else
{ 
    //Parent Inheritance
    event_inherited();
    
    //Checks if disabled or hidden.
    if (disabled or hidden) exit;
    
    //Checks if parent is disabled or hidden.
    if (view.disabled or view.hidden) exit;
    
    //Checks if mouse enabled.
    if (mouse_enabled)
    {
        //Handles Default Highlighting
        if (position_meeting(mouse_x, mouse_y, self))
        {
            highlight = true;
        }
        else
        {
            highlight = false;
        }
    }
    else
    {
        //Handles Selected Highlighting
        if (selected)
        {
            highlight = true;
        }
        else
        {
            highlight = false;
        }
    }
    
    //Calculates highlight color.
    value = animation_tween_step(id, highlight, tween_quintic_out, value, steps, 0, 1);
    color = merge_color(color1, color2, value);
    
    //Directional tween.
    if (directional_tween != noone)
    {
        y = animation_tween_step(id*2, directional_tween, tween_quintic_out, 
        y, directional_tween_duration, directional_tween_lower, directional_tween_upper);
    }
    
    //Check if input can be made.
    if (mouse_enabled and highlight_boolean())
    {
        //Handles Input Interaction
        if (input_check_pressed(0, mb_left))
        {
            event_user(0);
        }
    }
    
    //Checks if input can be made.
    if ((selected and !mouse_enabled))
    {
        //Handles Input Interaction
        if (input_check_pressed(0, gp_face1, vk_enter, ord("E")))
        {
            event_user(0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Directional Tween Effect

//Check if not already selected.
if (!selected)
{
    //Starts directional tween.
    directional_tween = true;
    alarm[1] = directional_tween_duration;
    
    //Detects start position.
    directional_tween_y = yy;
    
    //Detects direction of tween.
    if (animation_direction = "Upwards")
    {
        //Upwards tween.
        directional_tween_lower = directional_tween_y;
        directional_tween_upper = directional_tween_y - directional_tween_distance;
    }
    else
    {
        //Downwards tween.
        directional_tween_lower = directional_tween_y;
        directional_tween_upper = directional_tween_y + directional_tween_distance;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starts input detection.
input_detection = true;
image_index = 1;
color = color2;
global.bindingkey = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Drawing

//Checks if hidden.
if (hidden) exit;

//Checks if parent is hidden.
if (view.hidden) exit;

//Setup Drawing
draw_self();
draw_set_colour(color);
draw_set_font(font);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

//Check if input detection is on.
if (input_detection)
{
    //Draw Update Text.
    draw_text(x, y, "...");
}
else if (selected)
{
    //Draws Key Text
    draw_text(x, y, string_keycheck(key));
}
else
{
    //Draws Normal Text
    draw_text(x, y, text);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
