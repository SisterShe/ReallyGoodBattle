<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Instance Variables
can_skip = false;
draw_score = false;
game_over = false;
kill_self = false;
skipping = false;
draw_skip = false;

//Score List
scores = ds_list_create();
if (global.gamemode = "Player Lives")
{
    repeat (4)
    {
        ds_list_add(scores, global.score_max);
    }
}
else
{
    repeat (4)
    {
        ds_list_add(scores, 0);
    }
}
highest_score = 0;
highest_score_index = 0;

//Games List
games = ds_list_create();
winner_index = 0;
repeat (4)
{
    ds_list_add(games, 0);
}

//Tween Variables
alpha = 0;
alpha_lower = 0;
alpha_upper = 0.95;
duration = room_seconds(.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean-Up Leaks
ds_list_destroy(scores);
ds_list_destroy(games);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enables skipping.
can_skip = true;
draw_skip = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starts the scorescreen.

//Check if not already skipping.
if (skipping) exit;

//Updates variables.
draw_score = true;
alarm[1] = 30;

//Changes all player states.
with (Player1_obj)
{

}

with (Player2_obj)
{

}

with (Player3_obj)
{

}

with (Player4_obj)
{

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Tween and Input

//Tween Effect
alpha = animation_tween_step(id, draw_score, tween_linear, 
alpha, duration, alpha_lower, alpha_upper);

//Skipping Next Level
if (can_skip and input_check_pressed(0, gp_start, vk_escape))
{
    //Disables skipping.
    can_skip = false;
    skipping = true;
    
    //Check if game over.
    if (game_over)
    {        
        //Returns to menu.
        room_cfade(rm_mainmenu, room_seconds(1.5), c_white);
        kill_self = true;
    }
    else
    {        
        //Goes to next level.
        while (true)
        {
            new_room = choose(rm_level1, rm_level2, rm_level3, rm_level4);
            if (new_room != room)
            {
                room_cfade(new_room, room_seconds(1), c_black);
                //room_goto(new_room);
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks if a player have won.

//Loops through all scores to check if any is higher.
for (var i = 0; i &lt; ds_list_size(games); i++)
{
    var game_value = ds_list_find_value(games, i);
    if (game_value = global.games_max)
    {
        winner_index = i;
        game_over = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determines Highest Score Player

//Loops through all scores to check if any is higher.
for (var i = 0; i &lt; ds_list_size(scores); i++)
{
    var score_value = ds_list_find_value(scores, i);
    var score_index = i;
    if (score_value &gt; highest_score)
    {
        highest_score = score_value;
        highest_score_index = score_index;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resumes pause.
global.pause = false;
if (kill_self = true) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets scores and instance variables.

//Check if main menu.
if (room = rm_mainmenu)
{
    //Suicide.
    instance_destroy();
}

//Check if not pause or return from pause.
else if (room != rm_pause and !obj_pause_controller.input_alarm)
{
    //Enables pause.
    with (obj_pause_controller)
    {
        disabled = false;
    }
    
    //Destroy old list.
    ds_list_destroy(scores);
    
    //Instance Variables
    can_skip = false;
    draw_score = false;
    game_over = false;
    skipping = false;
    draw_skip = false;
    
    //Score List
    scores = ds_list_create();
    if (global.gamemode = "Player Lives")
    {
        repeat (4)
        {
            ds_list_add(scores, global.score_max);
        }
    }
    else
    {
        repeat (4)
        {
            ds_list_add(scores, 0);
        }
    }
    highest_score = 0;
    highest_score_index = 0;
    
    //Tween Variables
    alpha = 0;
    alpha_lower = 0;
    alpha_upper = 0.95;
    duration = room_seconds(.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Drawing

//Check if game master exists.
if (!instance_exists(GameMaster_obj)) exit;

//Check if gamemode is kills or captures.
if (global.gamemode = "Kills to Win" or global.gamemode = "Captures to Win")
{
    //Check if score should be drawn.
    if (draw_score)
    {
        //Draws black rectangle across screen.
        draw_set_alpha(alpha);
        draw_set_color(c_black);
        draw_rectangle(0, 0, room_width, room_height, false);
        draw_set_alpha(1);
        
        //Setup Drawing
        draw_setup(c_white, fnt_joystix_8, fa_center, fa_top, false);
        
        //Draws scoreboard.
        var xx = room_width / 2;
        var yy = 25;
        var sep = 25;
        draw_text(xx, yy, "Scoreboard");
        yy += sep * 2;
        
        //Reorders players based on performance.
        var queue = ds_priority_create();
        for (var i = 0; i &lt; ds_list_size(games); i++)
        {
            var priority = ds_list_find_value(games, i);
            var value = "Player " + string(i+1) + ": " + string(priority) + "/" + string(global.games_max);
            ds_priority_add(queue, value, priority);
        }
        
        //Draws players and scores.
        var first = true;
        repeat (i)
        {
            var text = ds_priority_delete_max(queue);
            if (first)
            {
                //Checks if game over.
                if (game_over)
                {
                    text += " (Winner)";
                }
                first = false;
            }
            else
            {
                //Checks if game over.
                if (game_over)
                {
                    text += " (Loser)";
                }
            }
            
            //TODO: Fix later maybe. Dynamic colors instead of hardcoded in game master.
            var color = c_white;
            var player_text = string_copy(text, 0, 8);
            switch (player_text)
            {
                case "Player 1":
                color = make_color_rgb(GameMaster_obj.Player1Red,
                GameMaster_obj.Player1Green,
                GameMaster_obj.Player1Blue);
                break;
                
                case "Player 2":
                color = make_color_rgb(GameMaster_obj.Player2Red,
                GameMaster_obj.Player2Green,
                GameMaster_obj.Player2Blue);
                break;
                
                case "Player 3":
                color = make_color_rgb(GameMaster_obj.Player3Red,
                GameMaster_obj.Player3Green,
                GameMaster_obj.Player3Blue);
                break;
                
                case "Player 4":
                color = make_color_rgb(GameMaster_obj.Player4Red,
                GameMaster_obj.Player4Green,
                GameMaster_obj.Player4Blue);
                break;
            }
            draw_set_color(color);
            draw_text(xx, yy, text);
            yy += sep;
        }
        
        //Clean-Up Leaks
        ds_priority_destroy(queue);
        
        //Draws press start to exit.
        if (draw_skip)
        {
            yy += sep * 2;
            draw_set_color(c_white);
            if (game_over)
            {
                //Check if gamepad is connected.
                if (gamepad_is_connected(0))
                {
                    draw_text(xx, yy, "Press Start to End");
                }
                else
                {
                    draw_text(xx, yy, "Press Escape to End");
                }
            }
            else
            {
                //Check if gamepad is connected.
                if (gamepad_is_connected(0))
                {
                    draw_text(xx, yy, "Press Start to Continue");
                }
                else
                {
                    draw_text(xx, yy, "Press Escape to Continue");
                }
            }
        }
    }
    
    //Draws HUD for games.
    else
    {        
        //Setup default variables.
        draw_setup(c_white, fnt_joystix_8, fa_center, fa_top, false);
        var thickness = 2;
        var yy = 6;
        
        //Determine number of connected players.
        var players = 0;
        with (GameMaster_obj)
        {
            if (Player1Active or global.player1_ai) players++;
            if (Player2Active or global.player2_ai) players++;
            if (Player3Active or global.player3_ai) players++;
            if (Player4Active or global.player4_ai) players++;
        }
        
        //Draws rectangle at top.
        draw_set_alpha(0.3);
        draw_set_color(c_black);
        draw_rectangle(0, 0, room_width, yy, false);
        draw_set_alpha(1);
        
        //Draws games for player 1.
        if (GameMaster_obj.Player1Active or global.player1_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 - room_width/4;
                break;
                
                case 3: 
                var xx = 40;
                break;
                
                case 4: 
                var xx = 20;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player1Red, GameMaster_obj.Player1Green, GameMaster_obj.Player1Blue);
            var player_score = ds_list_find_value(scores, 0);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);    
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
        
        //Draws games for player 2.
        if (GameMaster_obj.Player2Active or global.player2_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 + room_width/4;
                break;
                
                case 3: 
                var xx = room_width/2;
                break;
                
                case 4: 
                var xx = room_width/2 - room_width/6;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player2Red, GameMaster_obj.Player2Green, GameMaster_obj.Player2Blue);
            var player_score = ds_list_find_value(scores, 1);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
        
        //Draws games for player 3.
        if (GameMaster_obj.Player3Active or global.player3_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 + room_width/4;
                break;
                
                case 3: 
                if (GameMaster_obj.Player2Active or global.player2_ai)
                {
                    var xx = room_width - 40;
                }
                else
                {
                    var xx = room_width/2;
                }
                break;
                
                case 4: 
                var xx = room_width/2 + room_width/6;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player3Red, GameMaster_obj.Player3Green, GameMaster_obj.Player3Blue);
            var player_score = ds_list_find_value(scores, 2);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
        
        //Draws games for player 4.
        if (GameMaster_obj.Player4Active or global.player4_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 + room_width/4;
                break;
                
                case 3: 
                var xx = room_width - 40;
                break;
                
                case 4: 
                var xx = room_width - 20;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player4Red, GameMaster_obj.Player4Green, GameMaster_obj.Player4Blue);
            var player_score = ds_list_find_value(scores, 3);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
    }
}

//Draws lives instead of points.
else if (global.gamemode = "Player Lives")
{
    //Check if score should be drawn.
    if (draw_score)
    {
        //Draws black rectangle across screen.
        draw_set_alpha(alpha);
        draw_set_color(c_black);
        draw_rectangle(0, 0, room_width, room_height, false);
        draw_set_alpha(1);
        
        //Setup Drawing
        draw_setup(c_white, fnt_joystix_8, fa_center, fa_top, false);
        
        //Draws scoreboard.
        var xx = room_width / 2;
        var yy = 25;
        var sep = 25;
        draw_text(xx, yy, "Scoreboard");
        yy += sep * 2;
        
        //Reorders players based on performance.
        var queue = ds_priority_create();
        for (var i = 0; i &lt; ds_list_size(games); i++)
        {
            var priority = ds_list_find_value(games, i);
            var value = "Player " + string(i+1) + ": " + string(priority) + "/" + string(global.games_max);
            ds_priority_add(queue, value, priority);
        }
        
        //Draws players and scores.
        var first = true;
        repeat (i)
        {
            var text = ds_priority_delete_max(queue);
            if (first)
            {
                //Checks if game over.
                if (game_over)
                {
                    text += " (Winner)";
                }
                first = false;
            }
            else
            {
                //Checks if game over.
                if (game_over)
                {
                    text += " (Loser)";
                }
            }
            
            //TODO: Fix later maybe. Dynamic colors instead of hardcoded in game master.
            var color = c_white;
            var player_text = string_copy(text, 0, 8);
            switch (player_text)
            {
                case "Player 1":
                color = make_color_rgb(GameMaster_obj.Player1Red,
                GameMaster_obj.Player1Green,
                GameMaster_obj.Player1Blue);
                break;
                
                case "Player 2":
                color = make_color_rgb(GameMaster_obj.Player2Red,
                GameMaster_obj.Player2Green,
                GameMaster_obj.Player2Blue);
                break;
                
                case "Player 3":
                color = make_color_rgb(GameMaster_obj.Player3Red,
                GameMaster_obj.Player3Green,
                GameMaster_obj.Player3Blue);
                break;
                
                case "Player 4":
                color = make_color_rgb(GameMaster_obj.Player4Red,
                GameMaster_obj.Player4Green,
                GameMaster_obj.Player4Blue);
                break;
            }
            draw_set_color(color);
            draw_text(xx, yy, text);
            yy += sep;
        }
        
        //Clean-Up Leaks
        ds_priority_destroy(queue);
        
        //Draws press start to exit.
        if (draw_skip)
        {
            yy += sep * 2;
            draw_set_color(c_white);
            if (game_over)
            {
                //Check if gamepad is connected.
                if (gamepad_is_connected(0))
                {
                    draw_text(xx, yy, "Press Start to End");
                }
                else
                {
                    draw_text(xx, yy, "Press Escape to End");
                }
            }
            else
            {
                //Check if gamepad is connected.
                if (gamepad_is_connected(0))
                {
                    draw_text(xx, yy, "Press Start to Continue");
                }
                else
                {
                    draw_text(xx, yy, "Press Escape to Continue");
                }
            }
        }
    }
    
    //Draws HUD for lives.
    else
    {        
        //Setup default variables.
        draw_setup(c_white, fnt_joystix_8, fa_center, fa_top, false);
        var thickness = 2;
        var yy = 6;
        
        //Determine number of connected players.
        var players = 0;
        with (GameMaster_obj)
        {
            if (Player1Active or global.player1_ai) players++;
            if (Player2Active or global.player2_ai) players++;
            if (Player3Active or global.player3_ai) players++;
            if (Player4Active or global.player4_ai) players++;
        }
        
        //Draws rectangle at top.
        draw_set_alpha(0.3);
        draw_set_color(c_black);
        draw_rectangle(0, 0, room_width, yy, false);
        draw_set_alpha(1);
        
        //Draws games for player 1.
        if (GameMaster_obj.Player1Active or global.player1_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 - room_width/4;
                break;
                
                case 3: 
                var xx = 40;
                break;
                
                case 4: 
                var xx = 20;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player1Red, GameMaster_obj.Player1Green, GameMaster_obj.Player1Blue);
            var player_score = ds_list_find_value(scores, 0);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);    
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
        
        //Draws games for player 2.
        if (GameMaster_obj.Player2Active or global.player2_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 + room_width/4;
                break;
                
                case 3: 
                var xx = room_width/2;
                break;
                
                case 4: 
                var xx = room_width/2 - room_width/6;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player2Red, GameMaster_obj.Player2Green, GameMaster_obj.Player2Blue);
            var player_score = ds_list_find_value(scores, 1);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
        
        //Draws games for player 3.
        if (GameMaster_obj.Player3Active or global.player3_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 + room_width/4;
                break;
                
                case 3: 
                if (GameMaster_obj.Player2Active or global.player2_ai)
                {
                    var xx = room_width - 40;
                }
                else
                {
                    var xx = room_width/2;
                }
                break;
                
                case 4: 
                var xx = room_width/2 + room_width/6;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player3Red, GameMaster_obj.Player3Green, GameMaster_obj.Player3Blue);
            var player_score = ds_list_find_value(scores, 2);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
        
        //Draws games for player 4.
        if (GameMaster_obj.Player4Active or global.player4_ai)
        {
            switch (players)
            {
                case 1: 
                var xx = room_width/2; 
                break;
                 
                case 2: 
                var xx = room_width/2 + room_width/4;
                break;
                
                case 3: 
                var xx = room_width - 40;
                break;
                
                case 4: 
                var xx = room_width - 20;
                break;
            }
            var color = make_color_rgb(GameMaster_obj.Player4Red, GameMaster_obj.Player4Green, GameMaster_obj.Player4Blue);
            var player_score = ds_list_find_value(scores, 3);
            var total_score = global.score_max;
            var text = string(player_score) + "/" + string(total_score);
            draw_set_color(color);
            draw_text_outline(text, thickness, xx, yy);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
