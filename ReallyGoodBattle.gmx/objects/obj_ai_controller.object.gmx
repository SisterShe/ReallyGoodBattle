<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Data Variables
player = noone;
number = noone;

//Instance Variables
input = "None";

//Lockon Player
lockon = noone;
lockon_duration = room_seconds(3);

//Default Input
default_input = noone;
default_input_duration = room_seconds(2);

//Hitbox Radius
hitbox_radius = irandom_range(40, 90);
hitbox_newtimer = room_seconds(1.5);
alarm[2] = hitbox_newtimer;

//Dodge Direction
dodge_direction = noone;
dodge_direction_reset = room_seconds(1);

//Long Jump Timer
long_jump = false;
long_jump_timer = room_seconds(0.25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets Long Jump
long_jump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Dodge Direction.
dodge_direction = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Random Hitbox Radius
hitbox_radius = irandom_range(40, 90);
alarm[2] = hitbox_newtimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Default Input
default_input = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets Lockon.
lockon = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Backup Code

/*
    The ai determines its input based on an hiercy of checks. For example if player is nearby,
    it attacks, if a player is in line, it moves towards them, if on shrine it stands still, etc.

    - AI Hiearchy
    Check for laser line.
    Check for hitbox nearby.
    Check for player nearby.
    Check for player above if have laser.
    Check for laser powerup, unless already have laser.
    Check for jump area.
    Check for player in a horizontal line.
    Check for player in a vertical line.
    Check for shrine in a horizontal line.
    Check for shrine in a vertical line.
    Check if lockon target is active.
    Default.
*/

/*

//Menu Exit
if (room = rm_gamesetup) exit;

//Check if target with laser is in a horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
}
if (target != noone and target != player)
{     
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if target is same orintation.
        if ((player.mState = up_mState or player.mState = down_mState) and (target.mState = up_mState or target.mState = down_mState))
        {  
            //Check if target is left or right.
            if (target.x &gt; player.x)
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
        else
        {
            input = choose("Jump");
            event_user(1);
            exit;
        }
    }
}

//Check if target with laser is in a vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{ 
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if target is same orintation.
        if ((player.mState = left_mState or player.mState = right_mState) and (target.mState = left_mState or target.mState = right_mState))
        {  
            //Check if target is up or down.
            if (target.y &gt; player.y)
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
        else
        {
            input = choose("Jump");
            event_user(1);
            exit;
        }
    }
}

//Check if hitbox is nearby.
with (player)
{
    var target = collision_circle(x, y, 75, Hitbox_obj, false, true);
}
if (target != noone and target.creator != player)
{
    //Jump
    //input = choose("Jump");
    //event_user(1);
    //exit;
}

//Check if player is in attack range.
with (player)
{
    var target = collision_circle(x, y, 75, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Check if target is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Up");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Down");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Right");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Left");
            event_user(1);
            exit;
        }
        break;
    }
    
    //Chick if player is standing on ground.
    if (player.image_angle = 0)
    {
        //Check if player is facing the right direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
    }
        
    //Chick if player is standing on right wall.
    if (player.image_angle = 90)
    {
        //Check if player is facing the upwards direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
    }
        
    //Chick if player is standing on top wall.
    if (player.image_angle = 180)
    {
        //Check if player is facing the left direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
    }
    
    //Chick if player is standing on left wall.
    if (player.image_angle = 270)
    {
        //Check if player is facing the downwards direction.
        if (player.image_xscale = -1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if player have laser.
if (player.CanLazer)
{
    //Check for movement state, to determine if target is directly above.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target = collision_line(x, y, x, 0, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Up");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target = collision_line(x, y, x, room_height, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Down");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target = collision_line(x, y, room_width, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Right");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target = collision_line(x, y, 0, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Left");
            event_user(1);
            exit;
        }
        break;
    } 
}

//Check if ai is in powerup area.
with (player)
{
    var target = collision_point(x, y, SpeedShrine_obj, true, true);
}
if (target != noone)
{
    //Check if playr already have laser.
    if (!player.CanLazer)
    {
        input = choose("None");
        event_user(1);
        exit;
    }
}

//Check for collision with jump area.
with (player)
{
    var target = collision_point(x, y, obj_ai_jumparea, false, true);
}
if (target != noone)
{
    input = choose("Jump", "Up", "Down", "Left", "Right");
    event_user(1);
    exit;
}

//Check if player is in horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Sets the target as lockon for short duration, if line collision is lost.
    lockon = target;
    alarm[0] = lockon_duration;
    
    //Check if player is in same mState as target.
    if ((player.mState = up_mState or player.mState = down_mState) and (target.mState = up_mState or target.mState = down_mState))
    {
        //Check if player have laser to fire.
        if (player.CanLazer)
        {
            //Check if orientation is right.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
            
            //Orientation is left.
            else
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
        }
        
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if player have laser to fire.
        if (player.CanLazer)
        {
            input = choose("Attack");
            event_user(1);
            exit;
        }
        
        //Check if player is horizontal movement state.
        if ((player.mState = up_mState or player.mState = down_mState))
        {
            //Check if target is left or right.
            if (target.x &gt; player.x)
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is left or right.
            if (target.x &gt; player.x)
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if player is in vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Sets the target as lockon for short duration, if line collision is lost.
    lockon = target;
    alarm[0] = lockon_duration;
    
    //Check if player is in same mState as ai.
    if ((player.mState = left_mState or player.mState = right_mState) and (target.mState = left_mState or target.mState = right_mState))
    {
        //Check if player have laser to fire.
        if (player.CanLazer)
        {
            //Check if orientation is up.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
            
            //Orientation is left.
            else
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
        }
        
        //Check if target is up or down.
        if (target.y &gt; player.y)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if player is vertical movement state.
        if (player.mState = left_mState or player.mState = right_mState)
        {
            //Check if player have laser to fire.
            if (player.CanLazer)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }    
        
            //Check if target is up or down.
            if (target.y &gt; player.y)
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is up or down.
            if (target.y &gt; player.y)
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if shrine is in horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Check if player is horizontal movement state.
    if (player.mState = up_mState or player.mState = down_mState)
    {
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
    }
}

//Check if shrine is in vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Check if player is vertical movement state.
    if (player.mState = left_mState or player.mState = right_mState)
    {
        //Check if target is up or down.
        if (target.y &gt; player.y)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if target is up or down.
        if (target.y &gt; player.y)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
}

//Check if lockon target exists.
/*
if (lockon != noone and instance_exists(lockon))
{
    //Check if player is in vertical movement state.
    if (player.mState = left_mState or player.mState = right_mState)
    {
        //Check if target is up or down.
        if (lockon.y &gt; player.y)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if target is left or right.
        if (lockon.x &gt; player.x)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
}
*/

/*

//Default vertical movement.
if (player.mState = left_mState or player.mState = right_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Down", "Up");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}

//Default horizontal movement.
if (player.mState = up_mState or player.mState = down_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Left", "Right");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Input

//Menu Exit
if (room = rm_gamesetup) exit;

//Runs code from player.
with (player)
{
    //Executes input script.
    AI_Input_Simulation(other.input);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Input

/*
    The ai determines its input based on an hiercy of checks. For example if player is nearby,
    it attacks, if a player is in line, it moves towards them, if on shrine it stands still, etc.

    - AI Hiearchy
    Check for long jump.
    Check for laser dodge line.
    Check for laser avoid line.
    Check for hitbox nearby.
    Check for player nearby.
    Check for player above if have laser.
    Check for laser powerup, unless already have laser.
    Check for jump area.
    Check for player in a horizontal line.
    Check for player in a vertical line.
    Check for shrine in a horizontal line.
    Check for shrine in a vertical line.
    
    
    what is most optimal default input?
    run in the direction of the nearest player.
    seems simple enough.
    
    
    
    Q: navigation maps to make jumping and that sort of navigation easier?
    
    
    
    TODO:
    Implement corner jump mechanic.
    * Determine direction when you are running into
    
    
    Default.
    
    
    
    
    
    
*/

//Menu Exit
if (room = rm_gamesetup) exit;

//Pause Exit.
if (obj_score_controller.can_skip or obj_score_controller.skipping)
{
    //Does nothing.
    input = choose("None");
    event_user(1);
    exit;
}

//Check for long jump.
if (long_jump)
{
    //Continues current jump.
    input = choose("Jump");
    event_user(1);
    exit;
}

//Check if target with laser is in a horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
}
if (target != noone and target != player)
{     
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if both players on ground.
        if (player.mState = down_mState and (target.mState = down_mState or target.mState = left_mState or target.mState = right_mState))
        {
            //Check if there is a wall above.
            with (player)
            {
                var target2 = collision_line(x, y, x, y+50, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Right", "Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if both players on ceiling.
        if (player.mState = up_mState and (target.mState = up_mState or target.mState = left_mState or target.mState = right_mState))
        {
            //Check if there is a wall below.
            with (player)
            {
                var target2 = collision_line(x, y, x, y-50, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Right", "Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if players on opposite sides.
        if ((player.mState = up_mState and target.mState = down_mState) or (player.mState = down_mState and target.mState = up_mState))
        {
            //Check if there is a wall to the right.
            with (player)
            {
                var target2 = collision_line(x, y, x+80, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Left");
                event_user(1);
                exit;
            }
            
            //Check if there is a wall to the left.
            with (player)
            {
                var target2 = collision_line(x, y, x-80, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Right");
                event_user(1);
                exit;
            }
            
            //Check if existing dodge direction.
            if (dodge_direction != noone)
            {
                //Executes default input.
                input = dodge_direction;
                event_user(1);
                exit;
            }
            else
            {
                //Dodges in a random direction.
                alarm[3] = dodge_direction_reset;
                input = choose("Right", "Left");
                event_user(1);
                exit;
            }
        } 
    }
}

//Check if target with laser is in a vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{ 
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if both players on left wall.
        if (player.mState = left_mState and (target.mState = left_mState or target.mState = up_mState or target.mState = down_mState))
        {
            //Check if there is a wall to the right.
            with (player)
            {
                var target2 = collision_line(x, y, x+50, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Up", "Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if both players on right wall.
        if (player.mState = right_mState and (target.mState = right_mState or target.mState = up_mState or target.mState = down_mState))
        {
            //Check if there is a wall to the left.
            with (player)
            {
                var target2 = collision_line(x, y, x-50, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Up", "Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if players on opposite sides.
        if ((player.mState = left_mState and target.mState = right_mState) or (player.mState = right_mState and target.mState = left_mState))
        {
            //Check if there is a wall above.
            with (player)
            {
                var target2 = collision_line(x, y, x, y-80, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Down");
                event_user(1);
                exit;
            }
            
            //Check if there is a wall below.
            with (player)
            {
                var target2 = collision_line(x, y, x, y+80, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Up");
                event_user(1);
                exit;
            }
            
            //Check if existing dodge direction.
            if (dodge_direction != noone)
            {
                //Executes default input.
                input = dodge_direction;
                event_user(1);
                exit;
            }
            else
            {
                //Dodges in a random direction.
                alarm[3] = dodge_direction_reset;
                input = choose("Up", "Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if hitbox is nearby.
with (player)
{
    var target = collision_circle(x, y, 75, Hitbox_obj, false, true);
}
if (target != noone and target.creator != player)
{
    //Jump
    //input = choose("Jump");
    //event_user(1);
    //exit;
    
    //todo move opposite direction of the thinige majig. 
}

//Check if player is in attack range.
with (player)
{
    var target = collision_circle(x, y, other.hitbox_radius, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Check if target is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Up", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Down", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Right", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Left", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
    }
    
    //Chick if player is standing on ground.
    if (player.image_angle = 0)
    {
        //Check if player is facing the right direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
    }
        
    //Chick if player is standing on right wall.
    if (player.image_angle = 90)
    {
        //Check if player is facing the upwards direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
    }

    //Chick if player is standing on top wall.
    if (player.image_angle = 180)
    {
        //Check if player is facing the left direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
    }
    
    //Chick if player is standing on left wall.
    if (player.image_angle = 270)
    {
        //Check if player is facing the downwards direction.
        if (player.image_xscale = -1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if player have laser.
if (player.CanLazer)
{
    //Check for movement state, to determine if target is directly above.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target = collision_line(x, y, x, 0, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Up");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target = collision_line(x, y, x, room_height, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Down");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target = collision_line(x, y, room_width, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Right");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target = collision_line(x, y, 0, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Left");
            event_user(1);
            exit;
        }
        break;
    } 
}

//Check if ai is in powerup area.
with (player)
{
    var target = collision_point(x, y, SpeedShrine_obj, true, true);
}
if (target != noone)
{
    //Check if playr already have laser.
    if (!player.CanLazer)
    {
        input = choose("None");
        event_user(1);
        exit;
    }
}

//Check for collision with jump area.
with (player)
{
    var target = collision_point(x, y, obj_ai_jumparea, false, true);
}
if (target != noone)
{
    input = choose("Jump", "Up", "Down", "Left", "Right");
    default_input = noone;
    event_user(1);
    exit;
}

//Check if player is in horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Sets the target as lockon for short duration, if line collision is lost.
    lockon = target;
    alarm[0] = lockon_duration;
    
    //Check if player is in same mState as target.
    if ((player.mState = up_mState or player.mState = down_mState) and (target.mState = up_mState or target.mState = down_mState))
    {
        //Check if player have laser to fire.
        if (player.CanLazer)
        {
            //Check if orientation is right.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
            
            //Orientation is left.
            else
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
        }
        
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if player have laser to fire.
        if (player.CanLazer)
        {
            input = choose("Attack");
            event_user(1);
            exit;
        }
        
        //Check if player is horizontal movement state.
        if ((player.mState = up_mState or player.mState = down_mState))
        {
            //Check if target is left or right.
            if (target.x &gt; player.x)
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is left or right.
            if (target.x &gt; player.x)
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if shrine is in horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Check if shrine is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
    }
    
    //Check if player is horizontal movement state.
    if (player.mState = up_mState or player.mState = down_mState)
    {
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
    }
}

//Check if shrine is in vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Check if shrine is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
    }

    //Check if player is vertical movement state.
    if (player.mState = left_mState or player.mState = right_mState)
    {
        //Check if target is up or down.
        if (target.y &gt; player.y)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if target is up or down.
        if (target.y &gt; player.y)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
}

//Default vertical movement.
if (player.mState = left_mState or player.mState = right_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Down", "Up");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}

//Default horizontal movement.
if (player.mState = up_mState or player.mState = down_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Left", "Right");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}


/*

//Default movement.
if (default_input != noone)
{
    //Check if movement matches mState.
    if ((default_input = "Left" or default_input = "Right") and (player.mState = down_mState or player.mState = up_mState))
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
    
    //Check if movement matches mState.
    if ((default_input = "Up" or default_input = "Down") and (player.mState = left_mState or player.mState = right_mState))
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
}
else
{
    //Chick if player is standing on ground.
    if (player.mState = down_mState)
    {
        //Sets default input.
        default_input = choose("Left", "Right");
    }
    
    //Chick if player is standing on right wall.
    if (player.mState = right_mState)
    {
        //Sets default input.
        default_input = choose("Up", "Down");
    }
    
    //Chick if player is standing on ceiling.
    if (player.mState = up_mState)
    {
        //Sets default input.
        default_input = choose("Left", "Right");
    }
    
    //Chick if player is standing on left wall.
    if (player.mState = left_mState)
    {
        //Sets default input.
        default_input = choose("Up", "Down");
    }
    
    //Executes default input.
    alarm[1] = default_input_duration;
    input = default_input;
    event_user(1);
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test Drawing

/*

draw_set_alpha(0.3);

//Horizontal Line
var target = collision_line(0, player.y, room_width, player.y, Player_Parent, false, true)
if (target != noone and target != player)
{
    draw_set_color(c_orange);
    draw_circle(target.x, target.y, 15, false);
    draw_set_color(c_red);
}
else
{
    draw_set_color(c_green);
}
draw_line(0, player.y, room_width, player.y);

//Vertical Line
var target = collision_line(player.x, 0, player.x, room_height, Player_Parent, false, true)
if (target != noone and target != player)
{
    draw_set_color(c_orange);
    draw_circle(target.x, target.y, 15, false);
    draw_set_color(c_red);
}
else
{
    draw_set_color(c_green);
}
draw_line(player.x, 0, player.x, room_height);

//Circle Line
var target = collision_circle(player.x, player.y, 50, Player_Parent, false, true)
if (target != noone and target != player)
{
    draw_set_color(c_red);
}
else
{
    draw_set_color(c_green);
}
draw_circle(player.x, player.y, 30, false);


draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
