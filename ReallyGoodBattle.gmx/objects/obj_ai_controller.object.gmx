<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Data Variables
player = noone;
number = noone;

//Instance Variables
input = "None";

//Lockon Player
lockon = noone;
lockon_duration = room_seconds(5);

//Default Input
default_input = noone;
default_input_duration = room_seconds(5);

//Hitbox Radius
hitbox_radius = irandom_range(40, 80);
hitbox_newtimer = room_seconds(1.5);
alarm[2] = hitbox_newtimer;

//Dodge Radius
dodge_radius = irandom_range(20, 120);
dodge_newtimer = room_seconds(1.5);
alarm[5] = dodge_newtimer;

//Dodge Direction
dodge_direction = noone;
dodge_direction_reset = room_seconds(1);

//Long Jump Timer
long_jump = false;
long_jump_timer = room_seconds(0.25);

//Dodge Reset Timer
dodge_reset = false;
dodge_reset_timer = room_seconds(0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dodge Reset Timer
dodge_reset = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Random Dodge Radius
dodge_radius = irandom_range(20, 120);
alarm[2] = dodge_newtimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets Long Jump
long_jump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Dodge Direction.
dodge_direction = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Random Hitbox Radius
hitbox_radius = irandom_range(40, 80);
alarm[2] = hitbox_newtimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Default Input
default_input = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resets Lockon.
lockon = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Input

/*
    The ai determines its input based on an hiercy of checks. For example if player is nearby,
    it attacks, if a player is in line, it moves towards them, if on shrine it stands still, etc.

    - AI Hiearchy
    Check for long jump.
    Check for laser dodge line.
    Check for laser avoid line.
    Check for hitbox nearby.
    Check for player nearby to attack.
    Check for player to attack with laser.
    Check for laser powerup.
    Check for jump area.
    Check for lockon target.
    Check for lockon shrine that exists.
    Check for lockon player that exists.
    Check for default input.
    Default input.
    
    
    
    
    
*/

//Menu Exit
if (room = rm_gamesetup) exit;

//Pause Exit.
if (obj_score_controller.can_skip or obj_score_controller.skipping)
{
    //Does nothing.
    input = choose("None");
    event_user(1);
    exit;
}

//Check for long jump.
if (long_jump)
{
    //Continues current jump.
    input = choose("Jump");
    event_user(1);
    exit;
}

//Check if target with laser is in a horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
}
if (target != noone and target != player)
{     
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if both players on ground.
        if (player.mState = down_mState and (target.mState = down_mState or target.mState = left_mState or target.mState = right_mState))
        {
            //Check if there is a wall above.
            with (player)
            {
                var target2 = collision_line(x, y, x, y+50, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Right", "Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if both players on ceiling.
        if (player.mState = up_mState and (target.mState = up_mState or target.mState = left_mState or target.mState = right_mState))
        {
            //Check if there is a wall below.
            with (player)
            {
                var target2 = collision_line(x, y, x, y-50, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Right", "Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if players on opposite sides.
        if ((player.mState = up_mState and target.mState = down_mState) or (player.mState = down_mState and target.mState = up_mState))
        {
            //Check if there is a wall to the right.
            with (player)
            {
                var target2 = collision_line(x, y, x+80, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Left");
                event_user(1);
                exit;
            }
            
            //Check if there is a wall to the left.
            with (player)
            {
                var target2 = collision_line(x, y, x-80, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Right");
                event_user(1);
                exit;
            }
            
            //Check if existing dodge direction.
            if (dodge_direction != noone)
            {
                //Executes default input.
                input = dodge_direction;
                event_user(1);
                exit;
            }
            else
            {
                //Dodges in a random direction.
                alarm[3] = dodge_direction_reset;
                input = choose("Right", "Left");
                event_user(1);
                exit;
            }
        } 
    }
}

//Check if target with laser is in a vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{ 
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if both players on left wall.
        if (player.mState = left_mState and (target.mState = left_mState or target.mState = up_mState or target.mState = down_mState))
        {
            //Check if there is a wall to the right.
            with (player)
            {
                var target2 = collision_line(x, y, x+50, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Up", "Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if both players on right wall.
        if (player.mState = right_mState and (target.mState = right_mState or target.mState = up_mState or target.mState = down_mState))
        {
            //Check if there is a wall to the left.
            with (player)
            {
                var target2 = collision_line(x, y, x-50, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Up", "Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if players on opposite sides.
        if ((player.mState = left_mState and target.mState = right_mState) or (player.mState = right_mState and target.mState = left_mState))
        {
            //Check if there is a wall above.
            with (player)
            {
                var target2 = collision_line(x, y, x, y-80, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Down");
                event_user(1);
                exit;
            }
            
            //Check if there is a wall below.
            with (player)
            {
                var target2 = collision_line(x, y, x, y+80, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Up");
                event_user(1);
                exit;
            }
            
            //Check if existing dodge direction.
            if (dodge_direction != noone)
            {
                //Executes default input.
                input = dodge_direction;
                event_user(1);
                exit;
            }
            else
            {
                //Dodges in a random direction.
                alarm[3] = dodge_direction_reset;
                input = choose("Up", "Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if hitbox is nearby.
with (player)
{
    var target = collision_circle(x, y, 75, Hitbox_obj, false, true);
}
if (target != noone and target.creator != player)
{
    //Jump
    //input = choose("Jump");
    //event_user(1);
    //exit;
    
    //todo move opposite direction of the thinige majig. 
    
    
    
    
    
    
    
    
    
}

//Check if player is in attack range.
with (player)
{
    var target = collision_circle(x, y, other.hitbox_radius, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Check if target is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Up", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Down", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Right", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Left", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Airborne State
        case airborne_state:      
        {
            //Attack Up
            with (player)
            {
                var target2 = collision_line(x, y, x, y-75, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Up");
                event_user(1);
                exit;
            }
            
            //Attack Down
            with (player)
            {
                var target2 = collision_line(x, y, x, y+75, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Down");
                event_user(1);
                exit;
            }
            
            //Attack Left
            with (player)
            {
                var target2 = collision_line(x, y, x-75, y, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Left");
                event_user(1);
                exit;
            }
            
            //Attack Right
            with (player)
            {
                var target2 = collision_line(x, y, x+75, y, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Right");
                event_user(1);
                exit;
            }
        }        
        break;
    }
    
    //Chick if player is standing on ground.
    if (player.image_angle = 0)
    {
        //Check if player is facing the right direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
    }
        
    //Chick if player is standing on right wall.
    if (player.image_angle = 90)
    {
        //Check if player is facing the upwards direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
    }

    //Chick if player is standing on top wall.
    if (player.image_angle = 180)
    {
        //Check if player is facing the left direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
    }
    
    //Chick if player is standing on left wall.
    if (player.image_angle = 270)
    {
        //Check if player is facing the downwards direction.
        if (player.image_xscale = -1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if player have laser.
if (player.CanLazer)
{
    //Check for movement state, to determine if target is directly above.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target = collision_line(x, y, x, 0, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Up");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target = collision_line(x, y, x, room_height, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Down");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target = collision_line(x, y, room_width, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Right");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target = collision_line(x, y, 0, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Left");
            event_user(1);
            exit;
        }
        break;
    } 
    
    //Check if target in horizontal line.
    with (player)
    {
        var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
    }
    if (target != noone and target != player)
    {
        //Chick if player is standing on ground.
        if (player.image_angle = 0)
        {
            //Check if player is facing the right direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
        }
    
        //Chick if player is standing on top wall.
        if (player.image_angle = 180)
        {
            //Check if player is facing the left direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
        }
    }
    
    //Check if target in vertical line.
    with (player)
    {
        var target = collision_line(x, 0, x, room_height, Player_Parent, false, true);
    }
    if (target != noone and target != player)
    {
        //Chick if player is standing on right wall.
        if (player.image_angle = 90)
        {
            //Check if player is facing the upwards direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
        }
        
        //Chick if player is standing on left wall.
        if (player.image_angle = 270)
        {
            //Check if player is facing the downwards direction.
            if (player.image_xscale = -1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
        }
    } 
}

//Check if ai is in powerup area.
with (player)
{
    var target = collision_point(x, y, SpeedShrine_obj, true, true);
}
if (target != noone)
{
    input = choose("None");
    event_user(1);
    exit;
}

//Check for collision with jump area.
with (player)
{
    var target = collision_point(x, y, obj_ai_jumparea, false, true);
}
if (target != noone)
{
    //TODO: Better corner jumpin, ye dig. Too much random not very gut yeah boi??
    
    
    
    
    
    input = choose("Jump", "Up", "Down", "Left", "Right");
    default_input = noone;
    event_user(1);
    exit;
}

//Check if lockon target exists.
if (lockon != noone and instance_exists(lockon))
{
    //Executes pathfinding towards lockon target.
    event_user(2);
    exit;
}

//Finds a shrine target to lockon to.
with (player)
{
    var target = collision_rectangle(0, 0, room_width, room_height, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Sets the lockon target.
    lockon = target;
    alarm[0] = lockon_duration;
}

//Finds a player target to lockon to.
with (player)
{
    var target = collision_rectangle(0, 0, room_width, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Sets the lockon target.
    lockon = target;
    alarm[0] = lockon_duration;
}

//Default vertical movement.
if (player.mState = left_mState or player.mState = right_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Down", "Up");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}

//Default horizontal movement.
if (player.mState = up_mState or player.mState = down_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Left", "Right");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI Backup 08-Sep-2017

/*
    The ai determines its input based on an hiercy of checks. For example if player is nearby,
    it attacks, if a player is in line, it moves towards them, if on shrine it stands still, etc.

    - AI Hiearchy
    Check for long jump.
    Check for laser dodge line.
    Check for laser avoid line.
    Check for hitbox nearby.
    Check for player nearby.
    Check for player above if have laser.
    Check for laser powerup, unless already have laser.
    Check for jump area.
    
    Check for lockon target.
    
    Check for player in a horizontal line.
    Check for player in a vertical line.
    Check for shrine in a horizontal line.
    Check for shrine in a vertical line.
    
    Default Input.
    
    
    
    Check for Lockon Target
    
    
    
    
    
    
    A-Star Grid
    
    
    
    
    Lockon A Target
    Either shrine or player, dun matter.
    When target is locked on, the default movement is towards the logon target if still alive.
    
    Movement Grid
    
    
    
    //Airborne State
    case airborne_state:
    {
    
    
    
    what is most optimal default input?
    run in the direction of the nearest player.
    seems simple enough.
    
    
    
    Q: navigation maps to make jumping and that sort of navigation easier?
    
    
    
    TODO:
    Implement corner jump mechanic.
    * Determine direction when you are running into
    
    
    Default.
    
    
    
    
    
    
*/

/*

//Menu Exit
if (room = rm_gamesetup) exit;

//Pause Exit.
if (obj_score_controller.can_skip or obj_score_controller.skipping)
{
    //Does nothing.
    input = choose("None");
    event_user(1);
    exit;
}

//Check for long jump.
if (long_jump)
{
    //Continues current jump.
    input = choose("Jump");
    event_user(1);
    exit;
}

//Check if target with laser is in a horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
}
if (target != noone and target != player)
{     
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if both players on ground.
        if (player.mState = down_mState and (target.mState = down_mState or target.mState = left_mState or target.mState = right_mState))
        {
            //Check if there is a wall above.
            with (player)
            {
                var target2 = collision_line(x, y, x, y+50, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Right", "Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if both players on ceiling.
        if (player.mState = up_mState and (target.mState = up_mState or target.mState = left_mState or target.mState = right_mState))
        {
            //Check if there is a wall below.
            with (player)
            {
                var target2 = collision_line(x, y, x, y-50, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Right", "Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if players on opposite sides.
        if ((player.mState = up_mState and target.mState = down_mState) or (player.mState = down_mState and target.mState = up_mState))
        {
            //Check if there is a wall to the right.
            with (player)
            {
                var target2 = collision_line(x, y, x+80, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Left");
                event_user(1);
                exit;
            }
            
            //Check if there is a wall to the left.
            with (player)
            {
                var target2 = collision_line(x, y, x-80, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Right");
                event_user(1);
                exit;
            }
            
            //Check if existing dodge direction.
            if (dodge_direction != noone)
            {
                //Executes default input.
                input = dodge_direction;
                event_user(1);
                exit;
            }
            else
            {
                //Dodges in a random direction.
                alarm[3] = dodge_direction_reset;
                input = choose("Right", "Left");
                event_user(1);
                exit;
            }
        } 
    }
}

//Check if target with laser is in a vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{ 
    //Check if target is have laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check if both players on left wall.
        if (player.mState = left_mState and (target.mState = left_mState or target.mState = up_mState or target.mState = down_mState))
        {
            //Check if there is a wall to the right.
            with (player)
            {
                var target2 = collision_line(x, y, x+50, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Up", "Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if both players on right wall.
        if (player.mState = right_mState and (target.mState = right_mState or target.mState = up_mState or target.mState = down_mState))
        {
            //Check if there is a wall to the left.
            with (player)
            {
                var target2 = collision_line(x, y, x-50, y, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Check if existing dodge direction.
                if (dodge_direction != noone)
                {
                    //Executes default input.
                    input = dodge_direction;
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges in a random direction.
                    alarm[3] = dodge_direction_reset;
                    input = choose("Up", "Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Dodge laser by jumping.
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Check if players on opposite sides.
        if ((player.mState = left_mState and target.mState = right_mState) or (player.mState = right_mState and target.mState = left_mState))
        {
            //Check if there is a wall above.
            with (player)
            {
                var target2 = collision_line(x, y, x, y-80, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Down");
                event_user(1);
                exit;
            }
            
            //Check if there is a wall below.
            with (player)
            {
                var target2 = collision_line(x, y, x, y+80, StealthCollisionUnit_obj, false, true);
            }
            if (target2 != noone)
            {
                //Dodge laser by moving left.
                input = choose("Up");
                event_user(1);
                exit;
            }
            
            //Check if existing dodge direction.
            if (dodge_direction != noone)
            {
                //Executes default input.
                input = dodge_direction;
                event_user(1);
                exit;
            }
            else
            {
                //Dodges in a random direction.
                alarm[3] = dodge_direction_reset;
                input = choose("Up", "Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if hitbox is nearby.
with (player)
{
    var target = collision_circle(x, y, 75, Hitbox_obj, false, true);
}
if (target != noone and target.creator != player)
{
    //Jump
    //input = choose("Jump");
    //event_user(1);
    //exit;
    
    //todo move opposite direction of the thinige majig. 
}

//Check if player is in attack range.
with (player)
{
    var target = collision_circle(x, y, other.hitbox_radius, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Check if target is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Up", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Down", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Right", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Left", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Airborne State
        case airborne_state:      
        {
            //Attack Up
            with (player)
            {
                var target2 = collision_line(x, y, x, y-75, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Up");
                event_user(1);
                exit;
            }
            
            //Attack Down
            with (player)
            {
                var target2 = collision_line(x, y, x, y+75, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Down");
                event_user(1);
                exit;
            }
            
            //Attack Left
            with (player)
            {
                var target2 = collision_line(x, y, x-75, y, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Left");
                event_user(1);
                exit;
            }
            
            //Attack Right
            with (player)
            {
                var target2 = collision_line(x, y, x+75, y, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Right");
                event_user(1);
                exit;
            }
        }        
        break;
    }
    
    //Chick if player is standing on ground.
    if (player.image_angle = 0)
    {
        //Check if player is facing the right direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
    }
        
    //Chick if player is standing on right wall.
    if (player.image_angle = 90)
    {
        //Check if player is facing the upwards direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
    }

    //Chick if player is standing on top wall.
    if (player.image_angle = 180)
    {
        //Check if player is facing the left direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
    }
    
    //Chick if player is standing on left wall.
    if (player.image_angle = 270)
    {
        //Check if player is facing the downwards direction.
        if (player.image_xscale = -1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                input = choose("Attack");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if player have laser.
if (player.CanLazer)
{
    //Check for movement state, to determine if target is directly above.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target = collision_line(x, y, x, 0, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Up");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target = collision_line(x, y, x, room_height, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Down");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target = collision_line(x, y, room_width, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Right");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target = collision_line(x, y, 0, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            input = choose("Laser Left");
            event_user(1);
            exit;
        }
        break;
    } 
}

//Check if ai is in powerup area.
with (player)
{
    var target = collision_point(x, y, SpeedShrine_obj, true, true);
}
if (target != noone)
{
    //Check if playr already have laser.
    if (!player.CanLazer)
    {
        input = choose("None");
        event_user(1);
        exit;
    }
}

//Check for collision with jump area.
with (player)
{
    var target = collision_point(x, y, obj_ai_jumparea, false, true);
}
if (target != noone)
{
    input = choose("Jump", "Up", "Down", "Left", "Right");
    default_input = noone;
    event_user(1);
    exit;
}


//Check if lockon target exists.
if (lockon != noone and instance_exists(lockon))
{
    //Executes pathfinding towards lockon target.
    event_user(2);
    exit;
}


//TODO: Fix laser and stuff later, sorta rewrite this thingie, cuz it smellssss...

//Check if player is in horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Sets the target as lockon for short duration, if line collision is lost.
    lockon = target;
    alarm[0] = lockon_duration;
    
    //Check if player is in same mState as target.
    if ((player.mState = up_mState or player.mState = down_mState) and (target.mState = up_mState or target.mState = down_mState))
    {
        //Check if player have laser to fire.
        if (player.CanLazer)
        {
            //Check if orientation is right.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
            
            //Orientation is left.
            else
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
        }
        
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if player have laser to fire.
        if (player.CanLazer)
        {
            input = choose("Attack");
            event_user(1);
            exit;
        }
        
        //Check if player is horizontal movement state.
        if ((player.mState = up_mState or player.mState = down_mState))
        {
            //Check if target is left or right.
            if (target.x &gt; player.x)
            {
                input = choose("Right");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Left");
                event_user(1);
                exit;
            }
        }
        else
        {
            //Check if target is left or right.
            if (target.x &gt; player.x)
            {
                input = choose("Up");
                event_user(1);
                exit;
            }
            else
            {
                input = choose("Down");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if shrine is in horizontal line.
with (player)
{
    var target = collision_line(0, y, room_width, y, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Sets the target as lockon for short duration, if line collision is lost.
    lockon = target;
    alarm[0] = lockon_duration;
    
    //Check if shrine is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
    }
    
    //Check if player is horizontal movement state.
    if (player.mState = up_mState or player.mState = down_mState)
    {
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if target is left or right.
        if (target.x &gt; player.x)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
    }
}

//Check if shrine is in vertical line.
with (player)
{
    var target = collision_line(x, 0, x, room_height, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Sets the target as lockon for short duration, if line collision is lost.
    lockon = target;
    alarm[0] = lockon_duration;
    
    //Check if shrine is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y-75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x, y+75, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x+75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_line(x, y, x-75, y, SpeedShrine_obj, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Long jump to shrine.
            long_jump = true;
            alarm[4] = long_jump_timer;
            input = choose("Jump");
            event_user(1);
            exit;
        }
        break;
    }

    //Check if player is vertical movement state.
    if (player.mState = left_mState or player.mState = right_mState)
    {
        //Check if target is up or down.
        if (target.y &gt; player.y)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
    }
    else
    {
        //Check if target is up or down.
        if (target.y &gt; player.y)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        else
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
    }
}

//Default vertical movement.
if (player.mState = left_mState or player.mState = right_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Down", "Up");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}

//Default horizontal movement.
if (player.mState = up_mState or player.mState = down_mState)
{
    //Check if default input exists.
    if (default_input != noone)
    {
        input = default_input;
        event_user(1);
        exit;
    }
    else
    {
        //Sets default input.
        default_input = choose("Left", "Right");
        alarm[1] = default_input_duration;
        input = default_input;
        event_user(1);
        exit;
    }
}






/*

//Default movement.
if (default_input != noone)
{
    //Check if movement matches mState.
    if ((default_input = "Left" or default_input = "Right") and (player.mState = down_mState or player.mState = up_mState))
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
    
    //Check if movement matches mState.
    if ((default_input = "Up" or default_input = "Down") and (player.mState = left_mState or player.mState = right_mState))
    {
        //Executes default input.
        input = default_input;
        event_user(1);
        exit;
    }
}
else
{
    //Chick if player is standing on ground.
    if (player.mState = down_mState)
    {
        //Sets default input.
        default_input = choose("Left", "Right");
    }
    
    //Chick if player is standing on right wall.
    if (player.mState = right_mState)
    {
        //Sets default input.
        default_input = choose("Up", "Down");
    }
    
    //Chick if player is standing on ceiling.
    if (player.mState = up_mState)
    {
        //Sets default input.
        default_input = choose("Left", "Right");
    }
    
    //Chick if player is standing on left wall.
    if (player.mState = left_mState)
    {
        //Sets default input.
        default_input = choose("Up", "Down");
    }
    
    //Executes default input.
    alarm[1] = default_input_duration;
    input = default_input;
    event_user(1);
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pathfinding Algorithm

/*
    The following is the AI pathfinding algorithm, it uses to generate a
    path or series of inputs from current location to target destination.
    
    It first creates a grid for the level, check for collision areas that are
    unwalkable. It then uses an A* algorithm to generate a path for the map. It uses this path
    to create input points to adjacent points in a 9 cell grid around the player.
    
    It checks the current movement state of the player, and executes the input to get
    it to the next cell, based on current orientation. 
    
    TODO: Have invalid paths return closets possible path to target origin, until valid path is found.
*/ 

//Creates the Grid for level.
var cell_size = 16;
var mp_grid = mp_grid_create(0, 0, room_width/cell_size, room_height/cell_size, cell_size, cell_size);
mp_grid_add_instances(mp_grid, CollisionUnit_obj, false);

//Check if target is a collision unit.
if (lockon.object_index = CollisionUnit_obj)
{
    mp_grid_clear_instances(mp_grid, lockon, false, 0, 0, room_width/cell_size, room_height/cell_size, cell_size, cell_size);    
}

//Check for players with lasers.
with (Player_Parent)
{
    if (CanLazer and other.player != id)
    {
        //mp_grid_add_rectangle(mp_grid, 0, y -32, room_width, y + 32);
        //mp_grid_add_rectangle(mp_grid, x-32, y, x+32, room_height);
    }
}

//Adds jump limits to the grid, based on orientation.
var jump_height = 200;
switch (player.mState)
{
    //Up State
    case up_mState:
    {
        mp_grid_add_rectangle(mp_grid, 0, 0, room_width, player.y-jump_height);
    }
    break;
    
    //Down State
    case down_mState:
    {
        mp_grid_add_rectangle(mp_grid, 0, room_height, room_width, player.y+jump_height);
    }
    break;
    
    //Left State
    case left_mState:
    {
        mp_grid_add_rectangle(mp_grid, player.x+jump_height, 0, room_width, room_height);
    }
    break;
    
    //Right State
    case right_mState:
    {
        mp_grid_add_rectangle(mp_grid, player.x-jump_height, 0, 0, room_height);
    }
    break;
    
    //Right State
    case airborne_state:
    {
        mp_grid_add_rectangle(mp_grid, 0, 0, room_width, player.y-jump_height);
        mp_grid_add_rectangle(mp_grid, 0, room_height, room_width, player.y+jump_height);
        mp_grid_add_rectangle(mp_grid, player.x+jump_height, 0, room_width, room_height);
        mp_grid_add_rectangle(mp_grid, player.x-jump_height, 0, 0, room_height);
    }
    break;
}

//Finds and creates the shortest path.
var path = path_add();
var success = mp_grid_astar(mp_grid, path, player.x, player.y, lockon.x, lockon.y, 
0, 0, room_width/cell_size, room_height/cell_size, cell_size, cell_size);

//Check if pathfinding was unsuccessful.
if (!success) 
{
    //Default vertical movement.
    if (player.mState = left_mState or player.mState = right_mState)
    {
        //Check if default input exists.
        if (default_input != noone)
        {
            //Executes default input.
            input = default_input;
            event_user(1);
            exit;
        }
        else
        {
            //Sets default input.
            default_input = choose("Down", "Up");
            alarm[1] = default_input_duration;
            input = default_input;
            event_user(1);
            exit;
        }
    }
    
    //Default horizontal movement.
    if (player.mState = up_mState or player.mState = down_mState)
    {
        //Check if default input exists.
        if (default_input != noone)
        {
            input = default_input;
            event_user(1);
            exit;
        }
        else
        {
            //Sets default input.
            default_input = choose("Left", "Right");
            alarm[1] = default_input_duration;
            input = default_input;
            event_user(1);
            exit;
        }
    }
}

//Creates point and determines angle.
var point_x = path_get_point_x(path, 1);
var point_y = path_get_point_y(path, 1);
var angle = point_direction(player.x, player.y, point_x, point_y);

//Determines Movement State
switch (player.mState)
{
    //Up State
    case up_mState:
    {
        //Right Angle
        if ((angle &gt;= 337.5 and angle &lt;= 360) or (angle &gt;= 0 and angle &lt;= 22.5))
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        
        //Up Right Angle
        if (angle &gt;= 22.5 and angle &lt;= 67.5)
        {
            input = choose("Jump Right");
            event_user(1);
            exit;
        }
        
        //Up Angle
        if (angle &gt;= 67.5 and angle &lt;= 112.5)
        {
            input = choose("Jump");
            event_user(1);
            exit;
        }
        
        //Up Left Angle
        if (angle &gt;= 112.5 and angle &lt;= 157.5)
        {
            input = choose("Jump Left");
            event_user(1);
            exit;
        }
        
        //Left Angle
        if (angle &gt;= 157.5 and angle &lt;= 202.5)
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
        
        //Left Down Angle
        if (angle &gt;= 202.5 and angle &lt;= 247.5)
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
        
        //Down Angle
        if (angle &gt;= 247.5 and angle &lt;= 292.5)
        {
            input = choose("None");
            event_user(1);
            exit;
        }
        
        //Down Right Angle
        if (angle &gt;= 292.5 and angle &lt;= 337.5)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
    }
    break;
    
    //Down State
    case down_mState:
    {
        //Right Angle
        if ((angle &gt;= 337.5 and angle &lt;= 360) or (angle &gt;= 0 and angle &lt;= 22.5))
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        
        //Up Right Angle
        if (angle &gt;= 22.5 and angle &lt;= 67.5)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        
        //Up Angle
        if (angle &gt;= 67.5 and angle &lt;= 112.5)
        {
            input = choose("None");
            event_user(1);
            exit;
        }
        
        //Up Left Angle
        if (angle &gt;= 112.5 and angle &lt;= 157.5)
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
        
        //Left Angle
        if (angle &gt;= 157.5 and angle &lt;= 202.5)
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
        
        //Left Down Angle
        if (angle &gt;= 202.5 and angle &lt;= 247.5)
        {
            input = choose("Jump Left");
            event_user(1);
            exit;
        }
        
        //Down Angle
        if (angle &gt;= 247.5 and angle &lt;= 292.5)
        {
            input = choose("Jump");
            event_user(1);
            exit;
        }
        
        //Down Right Angle
        if (angle &gt;= 292.5 and angle &lt;= 337.5)
        {
            input = choose("Jump Right");
            event_user(1);
            exit;
        }
    }
    break; 
    
    //Left State
    case left_mState:
    {
        //Right Angle
        if ((angle &gt;= 337.5 and angle &lt;= 360) or (angle &gt;= 0 and angle &lt;= 22.5))
        {
            input = choose("Jump");
            event_user(1);
            exit;
        }
        
        //Up Right Angle
        if (angle &gt;= 22.5 and angle &lt;= 67.5)
        {
            input = choose("Jump Up");
            event_user(1);
            exit;
        }
        
        //Up Angle
        if (angle &gt;= 67.5 and angle &lt;= 112.5)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        
        //Up Left Angle
        if (angle &gt;= 112.5 and angle &lt;= 157.5)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        
        //Left Angle
        if (angle &gt;= 157.5 and angle &lt;= 202.5)
        {
            input = choose("None");
            event_user(1);
            exit;
        }
        
        //Left Down Angle
        if (angle &gt;= 202.5 and angle &lt;= 247.5)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        
        //Down Angle
        if (angle &gt;= 247.5 and angle &lt;= 292.5)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        
        //Down Right Angle
        if (angle &gt;= 292.5 and angle &lt;= 337.5)
        {
            input = choose("Jump Down");
            event_user(1);
            exit;
        }
    }    
    break;
    
    //Right State
    case right_mState:
    {
        //Right Angle
        if ((angle &gt;= 337.5 and angle &lt;= 360) or (angle &gt;= 0 and angle &lt;= 22.5))
        {
            input = choose("None");
            event_user(1);
            exit;
        }
        
        //Up Right Angle
        if (angle &gt;= 22.5 and angle &lt;= 67.5)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        
        //Up Angle
        if (angle &gt;= 67.5 and angle &lt;= 112.5)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        
        //Up Left Angle
        if (angle &gt;= 112.5 and angle &lt;= 157.5)
        {
            input = choose("Jump Up");
            event_user(1);
            exit;
        }
        
        //Left Angle
        if (angle &gt;= 157.5 and angle &lt;= 202.5)
        {
            input = choose("Jump");
            event_user(1);
            exit;
        }
        
        //Left Down Angle
        if (angle &gt;= 202.5 and angle &lt;= 247.5)
        {
            input = choose("Jump Down");
            event_user(1);
            exit;
        }
        
        //Down Angle
        if (angle &gt;= 247.5 and angle &lt;= 292.5)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        
        //Down Right Angle
        if (angle &gt;= 292.5 and angle &lt;= 337.5)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
    }
    break;
    
    //Airborne State
    case airborne_state:
    {
        //Right Angle
        if ((angle &gt;= 337.5 and angle &lt;= 360) or (angle &gt;= 0 and angle &lt;= 22.5))
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        
        //Up Right Angle
        if (angle &gt;= 22.5 and angle &lt;= 67.5)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
        
        //Up Angle
        if (angle &gt;= 67.5 and angle &lt;= 112.5)
        {
            input = choose("Up");
            event_user(1);
            exit;
        }
        
        //Up Left Angle
        if (angle &gt;= 112.5 and angle &lt;= 157.5)
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
        
        //Left Angle
        if (angle &gt;= 157.5 and angle &lt;= 202.5)
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
        
        //Left Down Angle
        if (angle &gt;= 202.5 and angle &lt;= 247.5)
        {
            input = choose("Left");
            event_user(1);
            exit;
        }
        
        //Down Angle
        if (angle &gt;= 247.5 and angle &lt;= 292.5)
        {
            input = choose("Down");
            event_user(1);
            exit;
        }
        
        //Down Right Angle
        if (angle &gt;= 292.5 and angle &lt;= 337.5)
        {
            input = choose("Right");
            event_user(1);
            exit;
        }
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Input

//Menu Exit
if (room = rm_gamesetup) exit;

//Runs code from player.
with (player)
{
    //Executes input script.
    AI_Input_Simulation(other.input);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Input

/*
    The ai determines its input based on an hiercy of checks. For example if player is nearby,
    it attacks, if a player is in line, it moves towards them, if on shrine it stands still, etc.

    
    
    - AI Hiearchy
    Check for long jump.
    Check for laser dodge line.
    Check for laser avoid line.
    Check for hitbox nearby.
    Check for player nearby to attack.
    Check for player to attack with laser.
    Check for laser powerup.
    Check for jump area.
    Check for lockon target.
    Check for lockon shrine that exists.
    Check for lockon player that exists.
    Check for default input.
    Default input.
    
    
    
    
    #UP with clear left/right, go right.
    if no clear right, go left.
    only if the laser is vertical
    
    
    
    
    
    
    
    #1: Long Jump
    #2: Dodge Laser
    #3: Avoid Laser
    #4: Dodge Hitbox
    #5: Dodge Trap (Player around corner waiting to attack you, when you can't counter the attack.
    #6: Attack Nearby Player
    #7: Laser Player
    #8: Laser Powerup
    #9: Move to Lockon
    #10: Lockon Shrine
    #11: Lockon Player
    #12: Default None
    
    
    
    How to dodge laser:
    
    DODGE LASER:::
    
    
    Check in horizontal line if collision with player that can laser.
    Check if you can jump.
    
    
    
    idea:
    
    try remove laser dodge entirely.
    
    
    
    
    
    Problem:
    I don't know if the laser is horizontal or vertical.
    
    
    
    
    Check in horizontal line collision with a player that can fire a laser.
    If there is no room above to jump, jump.
    
    
    
    
    
    
*/

//Menu Exit
if (room = rm_gamesetup) exit;

//Pause Exit.
if (obj_score_controller.can_skip or obj_score_controller.skipping)
{
    //Does nothing.
    input = choose("None");
    event_user(1);
    exit;
}

//Check for long jump.
if (long_jump)
{
    //Continues current jump.
    input = choose("Jump");
    event_user(1);
    exit;
}

//Check if there is a laser line on player.
with (player)
{
    var target = collision_circle(x, y, 16, LazerLine, false, true);
}
if (target != noone)
{
    //Check for AI movement state.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        {
            //Check if laser line is horizontal.
            if (image_angle = 0 or image_angle = 180)
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                //Check if there is wall to the right.
                with (player)
                {
                    var target2 = collision_line(x, y, x+75, y, StealthCollisionUnit_obj, false, true);
                }
                if (target2 != noone and target2 != player)
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }  
            }
        }
        
        //Down State
        case down_mState:
        {
            //Check if laser line is horizontal.
            if (image_angle = 0 or image_angle = 180)
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                //Check if there is wall to the right.
                with (player)
                {
                    var target2 = collision_line(x, y, x+75, y, StealthCollisionUnit_obj, false, true);
                }
                if (target2 != noone and target2 != player)
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }  
            }
        }
        
        //Left State
        case left_mState:
        {
            //Check if laser line is horizontal.
            if (image_angle = 90 or image_angle = 270)
            {
                //Check if there is wall above.
                with (player)
                {
                    var target2 = collision_line(x, y, x, y-75, StealthCollisionUnit_obj, false, true);
                }
                if (target2 != noone and target2 != player)
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
        
        //Right State
        case right_mState:
        {
            //Check if laser line is horizontal.
            if (image_angle = 90 or image_angle = 270)
            {
                //Check if there is wall above.
                with (player)
                {
                    var target2 = collision_line(x, y, x, y-75, StealthCollisionUnit_obj, false, true);
                }
                if (target2 != noone and target2 != player)
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
        }
    }
}

//Check if target with laser is in a horizontal line.
with (player)
{
    var target = collision_rectangle(0, y-32, room_width, y+32, Player_Parent, false, true);
}
if (target != noone and target != player)
{     
    //Check if target have laser and ai can't laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check that target is outside hitbox range.
        if (point_distance(player.x, player.y, target.x, target.y) &gt; hitbox_radius)
        {
            //Check for AI movement state.
            switch (player.mState)
            {
                //Up State
                case up_mState:
                {
                    //Check if target is to the right.
                    if (target.x &gt; player.x)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Down");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Right");
                            event_user(1);
                            exit;
                        }   
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Down");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Left");
                            event_user(1);
                            exit;
                        } 
                    }
                }
                break;
                
                //Down State
                case down_mState:
                {
                    //Check if target is to the right.
                    if (target.x &gt; player.x)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Up");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Right");
                            event_user(1);
                            exit;
                        } 
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Up");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Left");
                            event_user(1);
                            exit;
                        } 
                    }
                }
                break;
                
                //Left State
                case left_mState:
                {
                    //Check if there is wall above.
                    with (player)
                    {
                        var target2 = collision_line(x, y, x, y-75, StealthCollisionUnit_obj, false, true);
                    }
                    if (target2 != noone and target2 != player)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Left");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Down");
                            event_user(1);
                            exit;
                        } 
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Left");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Up");
                            event_user(1);
                            exit;
                        } 
                    }  
                }
                break;
                
                //Right State
                case right_mState:
                {
                    //Check if there is wall above.
                    with (player)
                    {
                        var target2 = collision_line(x, y, x, y-75, StealthCollisionUnit_obj, false, true);
                    }
                    if (target2 != noone and target2 != player)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Right");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Down");
                            event_user(1);
                            exit;
                        } 
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Right");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Up");
                            event_user(1);
                            exit;
                        } 
                    }  
                }
                break;
                
                //Airborne State
                case airborne_state:
                {
                    //Check if target is to the right.
                    if (target.y &gt; player.y)
                    {
                        input = choose("Down");
                        event_user(1);
                        exit;
                    }
                    else
                    {
                        input = choose("Up");
                        event_user(1);
                        exit;
                    }
                }
                break;
            }
        }
    }
}

//Check if target with laser is in a vertical line.
with (player)
{
    var target = collision_rectangle(x-32, 0, x+32, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{ 
    //Check if target have laser and ai can't laser.
    if (target.CanLazer and !player.CanLazer)
    {
        //Check that target is outside hitbox range.
        if (point_distance(player.x, player.y, target.x, target.y) &gt; hitbox_radius)
        {
            //Check for AI movement state.
            switch (player.mState)
            {
                //Up State
                case up_mState:
                {
                    //Check if there is wall to the right.
                    with (player)
                    {
                        var target2 = collision_line(x, y, x+75, y, StealthCollisionUnit_obj, false, true);
                    }
                    if (target2 != noone and target2 != player)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Down");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Left");
                            event_user(1);
                            exit;
                        } 
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Down");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Right");
                            event_user(1);
                            exit;
                        } 
                    }  
                }
                break;
                
                //Down State
                case down_mState:
                {
                    //Check if there is wall to the right.
                    with (player)
                    {
                        var target2 = collision_line(x, y, x+75, y, StealthCollisionUnit_obj, false, true);
                    }
                    if (target2 != noone and target2 != player)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Up");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Left");
                            event_user(1);
                            exit;
                        } 
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Up");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Right");
                            event_user(1);
                            exit;
                        } 
                    }  
                }
                break;
                
                //Left State
                case left_mState:
                {
                    //Check if target is to the right.
                    if (target.y &gt; player.y)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Left");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Down");
                            event_user(1);
                            exit;
                        } 
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Left");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Up");
                            event_user(1);
                            exit;
                        } 
                    }
                }
                break;
                
                //Right State
                case right_mState:
                {
                    //Check if target is to the right.
                    if (target.y &gt; player.y)
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Right");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Down");
                            event_user(1);
                            exit;
                        } 
                    }
                    else
                    {
                        //Check if dodge reset have already been done.
                        if (!dodge_reset)
                        {
                            //Resets movement acceleration.
                            dodge_reset = true;
                            alarm[6] = dodge_reset_timer;
                            input = choose("Right");
                            event_user(1);
                            exit;
                        }
                        else
                        {
                            //Dodges opposite direction.
                            input = choose("Up");
                            event_user(1);
                            exit;
                        } 
                    }
                }
                break;
                
                //Airborne State
                case airborne_state:
                {
                    //Check if target is to the right.
                    if (target.x &gt; player.x)
                    {
                        input = choose("Left");
                        event_user(1);
                        exit;
                    }
                    else
                    {
                        input = choose("Right");
                        event_user(1);
                        exit;
                    }
                }
                break;
            }
        }
    }
}

//Check if hitbox is nearby.
with (player)
{
    var target = collision_circle(x, y, other.dodge_radius, Hitbox_obj, false, true);
    if (target = noone)
    {
        var target = collision_circle(x, y, other.dodge_radius, LazerBox, false, true);
    }
}
if (target != noone and target.creator != player)
{      
    //Chick if player is standing on ground.
    if (player.image_angle = 0)
    {
        //Check if player is facing the right direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Left");
                    event_user(1);
                    exit;
                }   
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Right");
                    event_user(1);
                    exit;
                }   
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Right");
                    event_user(1);
                    exit;
                }   
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Left");
                    event_user(1);
                    exit;
                }   
            }
        }
    }

    //Chick if player is standing on top wall.
    if (player.image_angle = 180)
    {
        //Check if player is facing the left direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.x &lt; player.x)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Right");
                    event_user(1);
                    exit;
                } 
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Left");
                    event_user(1);
                    exit;
                }   
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.x &gt; player.x)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Left");
                    event_user(1);
                    exit;
                }   
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Right");
                    event_user(1);
                    exit;
                }   
            }
        }
    }
}

/*

//Check if target in vertical line.
with (player)
{
    var target = collision_line(x-16, 0, x+16, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Chick if player is standing on right wall.
    if (player.image_angle = 90)
    {
        //Check if player is facing the upwards direction.
        if (player.image_xscale = 1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Down");
                    event_user(1);
                    exit;
                }   
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Up");
                    event_user(1);
                    exit;
                }   
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Up");
                    event_user(1);
                    exit;
                }   
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Down");
                    event_user(1);
                    exit;
                }   
            }
        }
    }
    
    //Chick if player is standing on left wall.
    if (player.image_angle = 270)
    {
        //Check if player is facing the downwards direction.
        if (player.image_xscale = -1)
        {
            //Check if target is in attack direction.
            if (target.y &lt; player.y)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Up");
                    event_user(1);
                    exit;
                }   
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Down");
                    event_user(1);
                    exit;
                }   
            }
        }
        else
        {
            //Check if target is in attack direction.
            if (target.y &gt; player.y)
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Down");
                    event_user(1);
                    exit;
                }   
            }
            else
            {
                //Check if dodge reset have already been done.
                if (!dodge_reset)
                {
                    //Resets movement acceleration.
                    dodge_reset = true;
                    alarm[6] = dodge_reset_timer;
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    //Dodges opposite direction.
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
        }
    }
}

*/


//Check if player is in attack range.
with (player)
{
    var target = collision_circle(x, y, other.hitbox_radius, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Check if target is above player.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target2 = collision_rectangle(x-16, y, x+16, y-other.hitbox_radius, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Up", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target2 = collision_rectangle(x-16, y, x+16, y+other.hitbox_radius, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Down", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target2 = collision_rectangle(x, y-16, x+other.hitbox_radius, y+16, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Right", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target2 = collision_rectangle(x, y-16, x-other.hitbox_radius, y+16, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            input = choose("Laser Left", "Jump");
            if (input = "Jump")
            {
                long_jump = true;
                alarm[4] = long_jump_timer;
                input = choose("Jump");
                event_user(1);
                exit;
            }
            else
            {
                event_user(1);
                exit;
            }
        }
        break;
        
        //Airborne State
        case airborne_state:      
        {
            //Attack Up
            with (player)
            {
                var target2 = collision_rectangle(x-16, y, x+16, y-other.hitbox_radius, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Up");
                event_user(1);
                exit;
            }
            
            //Attack Down
            with (player)
            {
                var target2 = collision_rectangle(x-16, y, x+16, y+other.hitbox_radius, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Down");
                event_user(1);
                exit;
            }
            
            //Attack Left
            with (player)
            {
                var target2 = collision_rectangle(x, y-16, x-other.hitbox_radius, y+16, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Left");
                event_user(1);
                exit;
            }
            
            //Attack Right
            with (player)
            {
                var target2 = collision_rectangle(x, y-16, x+other.hitbox_radius, y+16, Player_Parent, false, true);
            }
            if (target2 != noone and target2 != player)
            {
                input = choose("Laser Right");
                event_user(1);
                exit;
            }
        }        
        break;
    }
    
    //Chick if player is standing on ground.
    if (player.image_angle = 0)
    {
        //Check for target collision in direction.
        with (player)
        {
            var target2 = collision_rectangle(x-other.hitbox_radius, y-16, x+other.hitbox_radius, y+16, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Check if player is facing the right direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
        } 
    }
        
    //Chick if player is standing on right wall.
    if (player.image_angle = 90)
    {
        //Check for target collision in direction.
        with (player)
        {
            var target2 = collision_rectangle(x-16, y-other.hitbox_radius, x+16, y+other.hitbox_radius, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Check if player is facing the upwards direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
        }
    }

    //Chick if player is standing on top wall.
    if (player.image_angle = 180)
    {
        //Check for target collision in direction.
        with (player)
        {
            var target2 = collision_rectangle(x-other.hitbox_radius, y-16, x+other.hitbox_radius, y+16, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Check if player is facing the left direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            } 
        }   
    }
    
    //Chick if player is standing on left wall.
    if (player.image_angle = 270)
    {
        //Check for target collision in direction.
        with (player)
        {
            var target2 = collision_rectangle(x-16, y-other.hitbox_radius, x+16, y+other.hitbox_radius, Player_Parent, false, true);
        }
        if (target2 != noone and target2 != player)
        {
            //Check if player is facing the downwards direction.
            if (player.image_xscale = -1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    input = choose("Attack");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
        }   
    }
    
    
    //
    //Run opposite direction of player.
    //
    
    //Check to see if player is not inside a powerup.
    with (player)
    {
        var target2 = collision_point(x, y, SpeedShrine_obj, false, true);
    }
    if (target2 = noone)
    {
        //Chick if player is standing on ground.
        if (player.image_angle = 0)
        {
            //Check if player is facing the right direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
        }
            
        //Chick if player is standing on right wall.
        if (player.image_angle = 90)
        {
            //Check if player is facing the upwards direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
        }
    
        //Chick if player is standing on top wall.
        if (player.image_angle = 180)
        {
            //Check if player is facing the left direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }   
        }
        
        //Chick if player is standing on left wall.
        if (player.image_angle = 270)
        {
            //Check if player is facing the downwards direction.
            if (player.image_xscale = -1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }   
        }
    }
    else
    {
        input = choose("None");
        event_user(1);
        exit;
    }
}




//Check if AI can laser target.
if (player.CanLazer)
{
    
    
    
    //TODO: Predict laser attack.
    //If AI have laser, target is not in laser line, but laser rectangle, and is moving towards it, fire laser.
    //If target is in laser line, and standing still, fire laser, else save it for opportune moment.
    
    
    //Check for movement state, to determine if target is directly above.
    switch (player.mState)
    {
        //Up State
        case up_mState:
        with (player)
        {
            var target = collision_line(x, y, x, 0, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            //Check if target movement is slow enough.
            if (abs(target.hspeed) &lt;= 0) //12.5% speed.
            {
                input = choose("Laser Up");
                event_user(1);
                exit;
            }
        }
        break;
        
        //Down State
        case down_mState:
        with (player)
        {
            var target = collision_line(x, y, x, room_height, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            //Check if target movement is slow enough.
            if (abs(target.hspeed) &lt;= 0) //25% speed.
            {
                input = choose("Laser Down");
                event_user(1);
                exit;
            }
        }
        break;
        
        //Left State
        case left_mState:
        with (player)
        {
            var target = collision_line(x, y, room_width, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            //Check if target movement is slow enough.
            if (abs(target.vspeed) &lt;= 0) //25% speed.
            {
                input = choose("Laser Right");
                event_user(1);
                exit;
            }
        }
        break;
        
        //Right State
        case right_mState:
        with (player)
        {
            var target = collision_line(x, y, 0, y, Player_Parent, false, true);
        }
        if (target != noone and target != player)
        {
            //Check if target movement is slow enough.
            if (abs(target.vspeed) &lt;= 0) //25% speed.
            {
                input = choose("Laser Left");
                event_user(1);
                exit;
            }
        }
        break;
    } 
    
    
    
    //Check if target in horizontal line.
    with (player)
    {
        var target = collision_line(0, y, room_width, y, Player_Parent, false, true);
    }
    if (target != noone and target != player)
    {
        //Chick if player is standing on ground.
        if (player.image_angle = 0)
        {
            //Check if player is facing the right direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.vspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.vspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
        }
    
        //Chick if player is standing on top wall.
        if (player.image_angle = 180)
        {
            //Check if player is facing the left direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.x &lt; player.x)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.vspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Right");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.x &gt; player.x)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.vspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Left");
                    event_user(1);
                    exit;
                }
            }
        }
    }
    
    //Check if target in vertical line.
    with (player)
    {
        var target = collision_line(x, 0, x, room_height, Player_Parent, false, true);
    }
    if (target != noone and target != player)
    {
        //Chick if player is standing on right wall.
        if (player.image_angle = 90)
        {
            //Check if player is facing the upwards direction.
            if (player.image_xscale = 1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.hspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.hspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
        }
        
        //Chick if player is standing on left wall.
        if (player.image_angle = 270)
        {
            //Check if player is facing the downwards direction.
            if (player.image_xscale = -1)
            {
                //Check if target is in attack direction.
                if (target.y &lt; player.y)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.hspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Up");
                    event_user(1);
                    exit;
                }
            }
            else
            {
                //Check if target is in attack direction.
                if (target.y &gt; player.y)
                {
                    //Check if target movement is slow enough.
                    if (abs(target.hspeed) &lt;= 0) //25% speed.
                    {
                        input = choose("Attack");
                        event_user(1);
                        exit;
                    }
                }
                else
                {
                    input = choose("Down");
                    event_user(1);
                    exit;
                }
            }
        }
    } 
}


//Check if ai is in powerup area.
with (player)
{
    var target = collision_point(x, y, SpeedShrine_obj, true, true);
}
if (target != noone)
{
    //Check to see if airborne.
    if (player.mState = airborne_state)
    {
        //Sets a lockon to nearest wall and calculates pathfinding towards it.
        var wall = instance_nearest(player.x, player.y, StealthCollisionUnit_obj)
        {
            //Locks on to wall and moves towards it.
            lockon = wall;
            alarm[0] = lockon_duration;
            event_user(2);
            exit;
        }
    }
    else
    {
        input = choose("None");
        event_user(1);
        exit;
    } 
}



//Check if there is wall to the right.
with (player)
{
    var wall_right = collision_line(x, y, x+33, y, StealthCollisionUnit_obj, false, true);
}

//Check if there is a wall below.
with (player)
{
    var wall_below = collision_line(x, y, x, y+33, StealthCollisionUnit_obj, false, true);
}

//Check if there is a wall to the left.
with (player)
{
    var wall_left = collision_line(x, y, x-33, y, StealthCollisionUnit_obj, false, true);
}

//Check if there is a wall above.
with (player)
{
    var wall_above = collision_line(x, y, x, y-33, StealthCollisionUnit_obj, false, true);
}

//Check if AI is in a corner and need to jump to next wall.
switch (player.mState)
{
    //Up State
    case up_mState:
    {
        //Check if player is in right corner.
        if ((wall_right != noone and wall_below != noone))
        {
            input = choose("Jump Right");
            default_input = noone;
            event_user(1);
            exit;
        }
        
        //Check if player is in left corner.
        if ((wall_left != noone and wall_below != noone))
        {
            input = choose("Jump Left");
            default_input = noone;
            event_user(1);
            exit;
        }
    }
    break;
    
    //Down State
    case down_mState:
    {
        //Check if player is in right corner.
        if ((wall_right != noone and wall_above != noone))
        {
            input = choose("Jump Right");
            default_input = noone;
            event_user(1);
            exit;
        }
        
        //Check if player is in left corner.
        if ((wall_left != noone and wall_above != noone))
        {
            input = choose("Jump Left");
            default_input = noone;
            event_user(1);
            exit;
        }
    }
    break;
    
    //Left State
    case left_mState:
    {
        //Check if player is in top corner.
        if ((wall_left != noone and wall_above != noone))
        {
            input = choose("Jump Up");
            default_input = noone;
            event_user(1);
            exit;
        }
        
        //Check if player is in bottom corner.
        if ((wall_left != noone and wall_below != noone))
        {
            input = choose("Jump Down");
            default_input = noone;
            event_user(1);
            exit;
        }
    }
    break;
    
    //Right State
    case right_mState:
    {
        //Check if player is in top corner.
        if ((wall_right != noone and wall_above != noone))
        {
            input = choose("Jump Up");
            default_input = noone;
            event_user(1);
            exit;
        }
        
        //Check if player is in bottom corner.
        if ((wall_right != noone and wall_below != noone))
        {
            input = choose("Jump Down");
            default_input = noone;
            event_user(1);
            exit;
        }
    }
    break;
}

//Check if lockon target exists.
if (lockon != noone and instance_exists(lockon))
{
    //Executes pathfinding towards lockon target.
    event_user(2);
    exit;
}

//Finds a shrine target to lockon to.
with (player)
{
    var target = collision_rectangle(0, 0, room_width, room_height, SpeedShrine_obj, false, true);
}
if (target != noone and target != player)
{
    //Sets the lockon target.
    lockon = target;
    alarm[0] = lockon_duration;
}

//Finds a player target to lockon to.
with (player)
{
    var target = collision_rectangle(0, 0, room_width, room_height, Player_Parent, false, true);
}
if (target != noone and target != player)
{
    //Sets the lockon target.
    lockon = target;
    alarm[0] = lockon_duration;
}

//Default Input
input = "None";
event_user(1);
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test Drawing

/*

draw_set_alpha(0.3);

//Horizontal Line
var target = collision_line(0, player.y, room_width, player.y, Player_Parent, false, true)
if (target != noone and target != player)
{
    draw_set_color(c_orange);
    draw_circle(target.x, target.y, 15, false);
    draw_set_color(c_red);
}
else
{
    draw_set_color(c_green);
}
draw_line(0, player.y, room_width, player.y);

//Vertical Line
var target = collision_line(player.x, 0, player.x, room_height, Player_Parent, false, true)
if (target != noone and target != player)
{
    draw_set_color(c_orange);
    draw_circle(target.x, target.y, 15, false);
    draw_set_color(c_red);
}
else
{
    draw_set_color(c_green);
}
draw_line(player.x, 0, player.x, room_height);

//Circle Line
var target = collision_circle(player.x, player.y, 50, Player_Parent, false, true)
if (target != noone and target != player)
{
    draw_set_color(c_red);
}
else
{
    draw_set_color(c_green);
}
draw_circle(player.x, player.y, 30, false);


draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
