<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slider_wheel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_widget_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Parent Inheritance
event_inherited();

//Built-In Variables
image_speed = 0;

//Data Variables
script = noone;
lower = noone;
upper = noone;
constant = noone;

//Instance Variables
wheel_xx = 0;
grab = false;
value = 0;
previous_value = 0;
spd = 5;
key_left = gp_padl;
key_right = gp_padr;
key_select = gp_face1;
index_off = 0;
index_highlight = 1;
index_on = 2;

//Additional Variables
key_left2 = vk_left;
key_right2 = vk_right;
key_left3 = ord("A");
key_right3 = ord("D");
key_select2 = ord("E");
key_select3 = vk_enter;

//Tween Variables
scale = 1;
scale_upper = 1.2;
scale_lower = 1;
steps = room_seconds(0.25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Wheel Movement.

//Parent Inheritance
//event_inherited();

//Checks if disabled or hidden.
if (disabled or hidden) exit;

//Checks if parent is disabled or hidden.
if (view.disabled or view.hidden) exit;

//Check if mouse is enabled.
if (mouse_enabled)
{
    //Check if left pressed with mouseover.
    if (highlight_boolean() and input_check_pressed(0, mb_left))
    {
        //Makes wheel moveable.
        grab = true;
        audio_play_sound_volume(sfx_menu_confirm, 10, false, global.sfxvolume);
    }
    
    //Check if left released while grabbing.
    if (input_check_released(0, mb_left) and grab)
    {
        //Releases grab and executes code.
        grab = false;
        script_execute(script);
        audio_play_sound_volume(sfx_menu_confirm, 10, false, global.sfxvolume);
    }
}
else
{
    //Check for selection release.
    if (grab and input_check_pressed(0, key_select, key_select2, key_select3))
    {
        //Releases grab and executes code.
        grab = false;
        script_execute(script);
        audio_play_sound_volume(sfx_menu_confirm, 10, false, global.sfxvolume);
    }
    
    //Checks for selection grab.
    else if (selected and input_check_pressed(0, key_select, key_select2, key_select3))
    {
        //Makes wheel moveable.
        grab = true;
        audio_play_sound_volume(sfx_menu_confirm, 10, false, global.sfxvolume);
    }
}

//Confirms grabbing.
if (!mouse_check_button(mb_left) and mouse_enabled and grab)
{
    grab = false;
    script_execute(script);
    audio_play_sound_volume(sfx_menu_confirm, 10, false, global.sfxvolume);
}
else if (!mouse_enabled and !selected and grab)
{
    grab = false;
    script_execute(script);
    audio_play_sound_volume(sfx_menu_confirm, 10, false, global.sfxvolume);
}

//Check if grabbed.
if (grab)
{
    //Check if mouse movement.
    if (mouse_enabled)
    {
        x = clamp(mouse_x, leftLimit, rightLimit)
    }
    else
    {
        //Check for keyboard input.
        if (input_check(0, key_left, key_left2, key_left3))
        {
            x = clamp(x - spd, leftLimit, rightLimit);
            audio_play_sound_volume(sfx_rgb_down, 10, false, global.sfxvolume);
        }
        else if (input_check(0, key_right, key_right2, key_right3))
        {
            x = clamp(x + spd, leftLimit, rightLimit);
            audio_play_sound_volume(sfx_rgb_up, 10, false, global.sfxvolume);
        }
        else
        {
            //Check for gamepad input.
            gamepad_set_axis_deadzone(0, 0.5);
            var lkey = (gamepad_axis_value(0, gp_axislh) &lt; 0);
            var rkey = (gamepad_axis_value(0, gp_axislh) &gt; 0);
            if (lkey)
            {
                x = clamp(x - spd, leftLimit, rightLimit);
                audio_play_sound_volume(sfx_rgb_down, 10, false, global.sfxvolume);
            }
            else if (rkey)
            {
                x = clamp(x + spd, leftLimit, rightLimit);
                audio_play_sound_volume(sfx_rgb_up, 10, false, global.sfxvolume);
            }  
        }
    }
}

//Calculates percentage and updates value.
var percentage = ((x - leftLimit) / (rightLimit - leftLimit));
value = lower + ((upper - lower) * percentage);
slider.value = value;

//Check if contant update script.
if (constant and value != previous_value)
{
    //Executes script.
    script_execute(script);
}

//Updates previous value.
previous_value = value;

//Highlight Animations.
if (mouse_enabled)
{
    //Check if grabbed.
    if (grab)
    {
        image_index = index_on;
    }
    else if (highlight_boolean())
    {
        image_index = index_highlight;
    }
    else
    {
        image_index = index_off;
    }
}
else
{
    //Check if grabbed.
    if (grab)
    {
        image_index = index_on;
    }
    else if (selected)
    {
        image_index = index_highlight;
    }
    else
    {
        image_index = index_off;
    }
}

//Tweens scale of wheel when grabbed.
scale = animation_tween_step(id, grab, tween_quintic_out, scale, steps, scale_lower, scale_upper);
image_xscale = scale;
image_yscale = scale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
