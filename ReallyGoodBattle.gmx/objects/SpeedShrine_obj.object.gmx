<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>PointArea_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Built-In Variables
image_alpha = .3; 

//Activation Delay Alarm
alarm[0] = 60 * 1.5; 

//Instance Variables
charge = 0; 
Red = 255; 
Blue = 255; 
Green = 255; 
DVal = 2; 
Color = make_color_rgb(Red, Blue, Green);
default_color = c_white;
ShrineVal = 0; 
PlayerCount = 0; 
Last_Player_Count = 0;
Player1 = 0; 
Player2 = 0;
Player3 = 0;
Player4 = 0;
IsActive = false; 
capture_time = 60 * 6; //Seconds to capture.
sound = noone;

//Creation Tween Variables
step = 0;
total = 60 * 3;
start = 0;
final = 1;

//Children Instances
clock = instance_create(x,y,PointCounter_obj);
clock.creator = id;
border = instance_create(x,y,PointBorder_obj); 
border.creator = id;


 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sound != noone)
{
    audio_sound_gain(sound, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activates Shrine
IsActive = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Capturing of Shrine

//Check if shrine is active.
if (IsActive = true) 
{    
    //Check if player 1 is inside shrine.
    if (place_meeting(x,y,Player1_obj)) 
    {
        Player1 = 1; 
        Red = GameMaster_obj.Player1Red;
        Green = GameMaster_obj.Player1Green;
        Blue = GameMaster_obj.Player1Blue;
    } 
    else 
    {
        Player1 = 0;
    } 
    
    //Check if player 2 is inside shrine.
    if (place_meeting(x,y,Player2_obj)) 
    {
        Player2 = 1; 
        Red = GameMaster_obj.Player2Red;
        Green = GameMaster_obj.Player2Green;
        Blue = GameMaster_obj.Player2Blue;
    } 
    else 
    {
        Player2 = 0;
    } 
    
    //Check if player 3 is inside shrine.
    if (place_meeting(x,y,Player3_obj)) 
    {
        Player3 = 1; 
        Red = GameMaster_obj.Player3Red;
        Green = GameMaster_obj.Player3Green;
        Blue = GameMaster_obj.Player3Blue;
    } 
    else 
    {
        Player3 = 0;
    } 
    
    //Check if player 4 is inside shrine.
    if (place_meeting(x,y,Player4_obj)) 
    {
        Player4 = 1; 
        Red = GameMaster_obj.Player4Red;
        Green = GameMaster_obj.Player4Green;
        Blue = GameMaster_obj.Player4Blue;
    } 
    else 
    {
        Player4 = 0
    } 
    
    //Check how many players are inside the shrine.
    Last_Player_Count = PlayerCount;
    PlayerCount = (Player1 + Player2 + Player3 + Player4);
    
    
    //Check if new player entered.
    if (PlayerCount &gt; Last_Player_Count)
    {
        //audio_play_sound_volume(sfx_point_enter, 10, false, global.sfxvolume);
    }
    
    
    //Captures the shrine if only 1 player is inside.
    if (PlayerCount = 1) 
    {
        ShrineVal += 1;
        var final_color = make_color_rgb(Red, Green, Blue);
        Color = merge_colour(final_color, default_color, (capture_time - ShrineVal) / capture_time);   
        
       
    } 
    else if (PlayerCount = 0)
    {
        //Uncaptures the shrine.
        //ShrineVal = clamp(ShrineVal - 1, 0, capture_time);
        Color = default_color; 
        
    }
    
    //Sound
    if (PlayerCount &gt;= 1) 
    {
        if (!audio_is_playing(sound))
        sound = audio_play_sound_volume(amb_combo_up, 20, false, global.sfxvolume);
    }
    else
    {
        if (sound != noone)
        {
            audio_sound_gain(sound, 0, 0);
        }
        sound = noone;
    }
    
    
    
    //TODO: Update color between players.
    /*   
        2 Players
        p1 + p2;
        p1 + p3;
        p1 + p4;
        p2 + p3;
        p2 + p4;
        p3 + p4;
        
        3 Players
        p1 + p2 + p3
        p1 + p2 + p4
        p1 + p3 + p4
        p2 + p3 + p4
        p3 + p4 + p2
        p4 + p3 + p2 
        
        4 Players
        p1 + p2 + p3 + p4
    */
    
    
    
    //Updates the image blend.
    image_blend = Color; 
    
    
    /*
    if (Red &lt; 255) 
    {
        Red += DVal; 
    }
    if (Red &gt;= 255) 
    {
        Red = 255; 
    }
    if (Green &lt; 255) 
    {
        Green += DVal; 
    }
    if (Green &gt;= 255) 
    {
        Green = 255; 
    }
    if (Blue &lt; 255) 
    {
        Blue += DVal; 
    }
    if (Blue &gt;= 255) 
    {
        Blue = 255; 
    } 
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Player_Parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determines if shrine is captured.

//Check that the timer have passed.
if (ShrineVal &gt;= capture_time) 
{
    //Adds laser to player.
    other.charge += 1; 
    
    if (sound != noone)
        {
            audio_sound_gain(sound, 0, 30);
            sound = noone;
        }
    
    //Creates new shrine and destroys current.
    instance_create(random_range(32,room_width-32),random_range(32,room_height-32),ShrineChoice_obj);
    instance_destroy(); 
    
    audio_play_sound_volume(sfx_laser_get, 10, false, global.sfxvolume);
    
    //Check if point capture gamemode.
    if (global.gamemode = "Captures to Win")
    {
        //Detects capturing player.
        var player_instance = other;
        var i = 0;
        switch (other.object_index)
        {
            case Player1_obj:
            i = 0;
            break;
            
            case Player2_obj:
            i = 1;
            break;
            
            case Player3_obj:
            i = 2;
            break;
            
            case Player4_obj:
            i = 3;
            break;
        }
        
        //Runs code from score controller.
        with (obj_score_controller)
        {
            //Updates player score.
            var player_score = ds_list_find_value(scores, i);
            player_score += 1;
            ds_list_replace(scores, i, player_score);     
            event_user(0); //Updates highest score player.
            
            //Check for victory.
            if (player_score &gt;= global.score_max)
            {
                //Updates player game score.
                var game_score = ds_list_find_value(games, i);
                game_score += 1;
                ds_list_replace(games, i, game_score);   
                event_user(1); //Checks if player is winner.
                
                //Start slowmotion tween.
                instance_create(x, y, obj_tween_slowmotion);
                instance_create(other.x,other.y,BlackOut_obj); 
                
                //Scorescreen alarm.
                alarm[0] = 30;
                
                //Disables pause.
                with (obj_pause_controller)
                {
                    disabled = true;
                }
            }
            else
            {
                //Plays popup animation for score.
                animation_text_popup(-100, 1, 0.02, fnt_joystix_16, fa_center,
                fa_top, player_instance.x, player_instance.y, string(player_score), 100, 100,
                room_seconds(2), 50, 90, c_white, c_white);
            }
        }   
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>suicide();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
