<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loads Game Settings

//Initiate Game Globals.
event_user(0);

//Saves default settings.
event_user(1);

//Loads the settings gamefile.
ini_open("Settings");

//Settings.
global.fullscreen = ini_read_real("Settings", "Fullscreen", false);
global.musicvolume = ini_read_real("Settings", "MusicVolume", 1);
global.sfxvolume = ini_read_real("Settings", "SFXVolume", 1);

//Gameplay
global.score_max = ini_read_real("Gameplay", "Score_Max", 3);
global.games_max = ini_read_real("Gameplay", "Games_Max", 3);
global.player1_spriteset = ini_read_real("Gameplay", "Player1_SpriteSet", 1);
global.player2_spriteset = ini_read_real("Gameplay", "Player2_SpriteSet", 1);
global.player3_spriteset = ini_read_real("Gameplay", "Player3_SpriteSet", 1);
global.player4_spriteset = ini_read_real("Gameplay", "Player4_SpriteSet", 1);

//Keybindings
for (var i = 0; i &lt; 4; i++)
{
    var data = ds_list_find_value(global.keybindings, i);
    with (data)
    {
        //Keyboard
        left_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Left", ord("A"));
        right_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Right", ord("D"));
        up_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Up", ord("W"));
        down_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Down", ord("S"));
        jump_key1_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Jump1", vk_space);
        jump_key2_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Jump2", vk_space);
        attack_key1_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Attack1", vk_enter);
        attack_key2_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Attack2", mb_left);
        one_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_One", ord("1"));
        two_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Two", ord("2"));
        three_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Three", ord("3"));
        four_key_keyboard = ini_read_real("Keybindings", "Player" + string(i) + "Keyboard_Four", ord("4"));
        
        //Gamepad
        left_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Left", gp_padl);
        right_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Right", gp_padr);
        up_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Up", gp_padu);
        down_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Down", gp_padd);
        jump_key1_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Jump1", gp_face1);
        jump_key2_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Jump2", gp_shoulderlb);
        attack_key1_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Attack1", gp_face3);
        attack_key2_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Attack2", gp_shoulderrb);
        one_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_One", gp_padu);
        two_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Two", gp_padr);
        three_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Three", gp_padd);
        four_key_gamepad = ini_read_real("Keybindings", "Player" + string(i) + "Gamepad_Four", gp_padl);
        
        //Misc
        fullscreen_key = ini_read_real("Keybindings", "Player" + string(i) + "Fullscreen", ord("T"));
    }  
}

//Loads Fighters
for (var i = 0; i &lt; ds_list_size(obj_fighter_container.list); i++)
{
    suicide(ds_list_find_value(obj_fighter_container.list, i));
}
ds_list_clear(obj_fighter_container.list);
global.fighter_count = ini_read_real("Fighters", "Count", 4);
for (var i = 0; i &lt; global.fighter_count; i++)
{
    //Creates fighter.
    var fighter = instance_create(x, y, obj_fighter_data);
    with (fighter)
    {
        name = ini_read_string("Fighters", "Name_" + string(i), "Name");
        red = ini_read_real("Fighters", "Red_" + string(i), 255);
        green = ini_read_real("Fighters", "Green_" + string(i), 255);
        blue = ini_read_real("Fighters", "Blue_" + string(i), 255);
        model = ini_read_real("Fighters", "Model_" + string(i), 1);
    }
    ds_list_add(obj_fighter_container.list, fighter);
}

//Closes the settings file.
ini_close();

//Sets game resolution.
window_set_fullscreen(global.fullscreen);

//Goes to splashscreen.
room_goto(rm_splashscreen_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Saves Default Settings

//Loads the settings gamefile.
ini_open("Settings");

//Checks if initial settings have been made.
if (!ini_read_real("Settings", "Default", false))
{
    //Saves default settings.
    ini_write_real("Settings", "Default", true);
    
    //Settings.
    ini_write_real("Settings", "Fullscreen", global.fullscreen);
    ini_write_real("Settings", "MusicVolume", global.musicvolume);
    ini_write_real("Settings", "SFXVolume", global.sfxvolume);
    
    //Gameplay
    ini_write_real("Gameplay", "Score_Max", global.score_max);
    ini_write_real("Gameplay", "Games_Max", global.games_max);
    ini_write_real("Gameplay", "Player1_SpriteSet", global.player1_spriteset);
    ini_write_real("Gameplay", "Player2_SpriteSet", global.player2_spriteset);
    ini_write_real("Gameplay", "Player3_SpriteSet", global.player3_spriteset);
    ini_write_real("Gameplay", "Player4_SpriteSet", global.player4_spriteset);
    
    //Keybindings
    for (var i = 0; i &lt; 4; i++)
    {
        var data = ds_list_find_value(global.keybindings, i);
        with (data)
        {
            //Keyboard
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Left", left_key_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Right", right_key_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Up", up_key_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Down", down_key_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Jump1", jump_key1_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Jump2", jump_key2_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Attack1", attack_key1_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Attack2", attack_key2_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_One", one_key_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Two", two_key_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Three", three_key_keyboard);
            ini_write_real("Keybindings", "Player" + string(i) + "Keyboard_Four", four_key_keyboard);
            
            //Gamepad
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Left", left_key_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Right", right_key_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Up", up_key_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Down", down_key_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Jump1", jump_key1_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Jump2", jump_key2_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Attack1", attack_key1_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Attack2", attack_key2_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_One", one_key_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Two", two_key_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Three", three_key_gamepad);
            ini_write_real("Keybindings", "Player" + string(i) + "Gamepad_Four", four_key_gamepad);
            
            //Misc
            ini_write_real("Keybindings", "Player" + string(i) + "Fullscreen", fullscreen_key);
        }  
    }  
    
    //Creates fighters.
   
    //Fighter 1:
    var fighter = instance_create(x, y, obj_fighter_data);
    with (fighter)
    {
        name = "Kate";
        red = 255;
        green = 50;
        blue = 240;
        model = 1;
    }
    ds_list_add(obj_fighter_container.list, fighter);
    
    //Fighter 2:
    var fighter = instance_create(x, y, obj_fighter_data);
    with (fighter)
    {
        name = "Robo-Tron";
        red = 128;
        green = 128;
        blue = 128;
        model = 2;
    }
    ds_list_add(obj_fighter_container.list, fighter);
    
    //Fighter 3:
    var fighter = instance_create(x, y, obj_fighter_data);
    with (fighter)
    {
        name = "Boxhead";
        red = 96;
        green = 96;
        blue = 255;
        model = 2;
    }
    ds_list_add(obj_fighter_container.list, fighter);
    
    //Fighter 4:
    var fighter = instance_create(x, y, obj_fighter_data);
    with (fighter)
    {
        name = "The Pro";
        red = 255;
        green = 255;
        blue = 0;
        model = 3;
    }
    ds_list_add(obj_fighter_container.list, fighter);
    
    //Saves Fighters.
    global.fighter_count = ds_list_size(obj_fighter_container.list);
    ini_write_real("Fighters", "Count", global.fighter_count);
    for (var i = 0; i &lt; global.fighter_count; i++)
    {
        with (obj_fighter_container)
        {
            var fighter = ds_list_find_value(list, i);
            with (fighter)
            {
                ini_write_string("Fighters", "Name_" + string(i), name);
                ini_write_real("Fighters", "Red_" + string(i), red);
                ini_write_real("Fighters", "Green_" + string(i), green);
                ini_write_real("Fighters", "Blue_" + string(i), blue);
                ini_write_real("Fighters", "Model_" + string(i), model);
            }
        }
    }    
}


//Closes the settings file.
ini_close();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate Globals.

//Settings
global.gameWidth = 512;
global.gameHeight = 288;
global.fullscreen = false;
global.musicvolume = 1;
global.sfxvolume = 1;

//Gameplay
global.score_label = noone;
global.game_label = noone;
global.gamemode = "Kills to Win";
global.score_max = 3;
global.games_max = 3;
global.pause = false;
global.player1_spriteset = 1;
global.player2_spriteset = 1;
global.player3_spriteset = 1;
global.player4_spriteset = 1;
global.respawn_timer = 1;
global.fighter_container = instance_create(x, y, obj_fighter_container);
global.fighter_count = 4;

//Artifical Intelligence
global.player1_ai = false;
global.player2_ai = false;
global.player3_ai = false;
global.player4_ai = false;

//Key-Bindings
global.keybindings = ds_list_create();
var i = 0;
repeat (4)
{
    var data = instance_create(x, y, eng_data_persistent);
    with (data)
    {
        //Player 1 Default
        if (i = 0)
        {
            //Keyboard
            left_key_keyboard = ord("A");
            right_key_keyboard = ord("D");
            up_key_keyboard = ord("W");
            down_key_keyboard = ord("S");
            jump_key1_keyboard = vk_space;
            jump_key2_keyboard = vk_shift;
            attack_key1_keyboard = ord("F");
            attack_key2_keyboard = mb_left;
            one_key_keyboard = ord("1");
            two_key_keyboard = ord("2");
            three_key_keyboard = ord("3");
            four_key_keyboard = ord("4");
        }
        
        //Player 2 Default
        if (i = 1)
        {
            //Keyboard
            left_key_keyboard = vk_left;
            right_key_keyboard = vk_right;
            up_key_keyboard = vk_up;
            down_key_keyboard = vk_down;
            jump_key1_keyboard = vk_control;
            jump_key2_keyboard = vk_control;
            attack_key1_keyboard = vk_enter;
            attack_key2_keyboard = mb_right;
            one_key_keyboard = ord("1");
            two_key_keyboard = ord("2");
            three_key_keyboard = ord("3");
            four_key_keyboard = ord("4");
        }
        
        //Player 3 Default
        if (i = 2)
        {
            //Keyboard
            left_key_keyboard = ord("F");
            right_key_keyboard = ord("H");
            up_key_keyboard = ord("T");
            down_key_keyboard = ord("G");
            jump_key1_keyboard = ord("Y");
            jump_key2_keyboard = ord("Y");
            attack_key1_keyboard = ord("J");
            attack_key2_keyboard = ord("J");
            one_key_keyboard = ord("1");
            two_key_keyboard = ord("2");
            three_key_keyboard = ord("3");
            four_key_keyboard = ord("4");
        }
        
        //Player 4 Default
        if (i = 3)
        {
            //Keyboard
            left_key_keyboard = vk_numpad4;
            right_key_keyboard = vk_numpad6;
            up_key_keyboard = vk_numpad8;
            down_key_keyboard = vk_numpad5;
            jump_key1_keyboard = vk_numpad7;
            jump_key2_keyboard = vk_numpad7;
            attack_key1_keyboard = vk_numpad9;
            attack_key2_keyboard = vk_numpad9;
            one_key_keyboard = ord("1");
            two_key_keyboard = ord("2");
            three_key_keyboard = ord("3");
            four_key_keyboard = ord("4");
        }
        
        //Gamepad
        left_key_gamepad = gp_padl;
        right_key_gamepad = gp_padr;
        up_key_gamepad = gp_padu;
        down_key_gamepad = gp_padd;
        jump_key1_gamepad = gp_face1;
        jump_key2_gamepad = gp_shoulderlb;
        attack_key1_gamepad = gp_face3;
        attack_key2_gamepad = gp_shoulderrb;
        one_key_gamepad = gp_padu;
        two_key_gamepad = gp_padr;
        three_key_gamepad = gp_padd;
        four_key_gamepad = gp_padl;
        
        //Misc
        fullscreen_key = ord("T");
    }
    ds_list_add(global.keybindings, data);
    i++;
}
global.bindingkey = false;

//Obsolete?
global.zoom = 2; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
